
freq_duty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001658  08001658  00011658  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001678  08001678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800167c  0800167c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000805d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014b1  00000000  00000000  00028091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000d5f  00000000  00000000  00029542  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  0002a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001bd1  00000000  00000000  0002a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001903  00000000  00000000  0002bfb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002d8bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000710  00000000  00000000  0002d938  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000001c8  00000000  00000000  0002e048  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001640 	.word	0x08001640

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001640 	.word	0x08001640
 80001c8:	4770      	bx	lr

080001ca <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80001ca:	4770      	bx	lr

080001cc <HAL_DeInit>:
{
 80001cc:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80001ce:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <HAL_DeInit+0x28>)
 80001d0:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 80001d4:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 80001d6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80001d8:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 80001da:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80001dc:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 80001de:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80001e0:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 80001e2:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80001e4:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 80001e6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80001e8:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 80001ea:	f7ff ffee 	bl	80001ca <HAL_MspDeInit>
}
 80001ee:	4620      	mov	r0, r4
 80001f0:	bd10      	pop	{r4, pc}
 80001f2:	bf00      	nop
 80001f4:	40023800 	.word	0x40023800

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <HAL_InitTick+0x24>)
{
 80001fc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	fbb0 f0f3 	udiv	r0, r0, r3
 8000208:	f000 f922 	bl	8000450 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800020c:	2200      	movs	r2, #0
 800020e:	4621      	mov	r1, r4
 8000210:	f04f 30ff 	mov.w	r0, #4294967295
 8000214:	f000 f8bc 	bl	8000390 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_Init>:
{
 8000220:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000222:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <HAL_Init+0x30>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800022a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000232:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800023a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800023c:	2003      	movs	r0, #3
 800023e:	f000 f895 	bl	800036c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000242:	2000      	movs	r0, #0
 8000244:	f7ff ffd8 	bl	80001f8 <HAL_InitTick>
  HAL_MspInit();
 8000248:	f000 fec2 	bl	8000fd0 <HAL_MspInit>
}
 800024c:	2000      	movs	r0, #0
 800024e:	bd08      	pop	{r3, pc}
 8000250:	40023c00 	.word	0x40023c00

08000254 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000254:	4a02      	ldr	r2, [pc, #8]	; (8000260 <HAL_IncTick+0xc>)
 8000256:	6813      	ldr	r3, [r2, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	6013      	str	r3, [r2, #0]
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000024 	.word	0x20000024

08000264 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000264:	4b01      	ldr	r3, [pc, #4]	; (800026c <HAL_GetTick+0x8>)
 8000266:	6818      	ldr	r0, [r3, #0]
}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000024 	.word	0x20000024

08000270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000272:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000274:	f7ff fff6 	bl	8000264 <HAL_GetTick>
  uint32_t wait = Delay;
 8000278:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800027a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800027c:	4605      	mov	r5, r0
  {
     wait++;
 800027e:	bf18      	it	ne
 8000280:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000282:	f7ff ffef 	bl	8000264 <HAL_GetTick>
 8000286:	1b40      	subs	r0, r0, r5
 8000288:	42a0      	cmp	r0, r4
 800028a:	d3fa      	bcc.n	8000282 <HAL_Delay+0x12>
  {
  }
}
 800028c:	b003      	add	sp, #12
 800028e:	bd30      	pop	{r4, r5, pc}

08000290 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000290:	4a02      	ldr	r2, [pc, #8]	; (800029c <HAL_SuspendTick+0xc>)
 8000292:	6813      	ldr	r3, [r2, #0]
 8000294:	f023 0302 	bic.w	r3, r3, #2
 8000298:	6013      	str	r3, [r2, #0]
 800029a:	4770      	bx	lr
 800029c:	e000e010 	.word	0xe000e010

080002a0 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80002a0:	4a02      	ldr	r2, [pc, #8]	; (80002ac <HAL_ResumeTick+0xc>)
 80002a2:	6813      	ldr	r3, [r2, #0]
 80002a4:	f043 0302 	orr.w	r3, r3, #2
 80002a8:	6013      	str	r3, [r2, #0]
 80002aa:	4770      	bx	lr
 80002ac:	e000e010 	.word	0xe000e010

080002b0 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F4xx_HAL_VERSION;
}
 80002b0:	4800      	ldr	r0, [pc, #0]	; (80002b4 <HAL_GetHalVersion+0x4>)
 80002b2:	4770      	bx	lr
 80002b4:	01070200 	.word	0x01070200

080002b8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80002b8:	4b01      	ldr	r3, [pc, #4]	; (80002c0 <HAL_GetREVID+0x8>)
 80002ba:	6818      	ldr	r0, [r3, #0]
}
 80002bc:	0c00      	lsrs	r0, r0, #16
 80002be:	4770      	bx	lr
 80002c0:	e0042000 	.word	0xe0042000

080002c4 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80002c4:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <HAL_GetDEVID+0xc>)
 80002c6:	6818      	ldr	r0, [r3, #0]
}
 80002c8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e0042000 	.word	0xe0042000

080002d4 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80002d4:	4a02      	ldr	r2, [pc, #8]	; (80002e0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80002d6:	6853      	ldr	r3, [r2, #4]
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6053      	str	r3, [r2, #4]
 80002de:	4770      	bx	lr
 80002e0:	e0042000 	.word	0xe0042000

080002e4 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80002e4:	4a02      	ldr	r2, [pc, #8]	; (80002f0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80002e6:	6853      	ldr	r3, [r2, #4]
 80002e8:	f023 0301 	bic.w	r3, r3, #1
 80002ec:	6053      	str	r3, [r2, #4]
 80002ee:	4770      	bx	lr
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80002f4:	4a02      	ldr	r2, [pc, #8]	; (8000300 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80002f6:	6853      	ldr	r3, [r2, #4]
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	6053      	str	r3, [r2, #4]
 80002fe:	4770      	bx	lr
 8000300:	e0042000 	.word	0xe0042000

08000304 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000304:	4a02      	ldr	r2, [pc, #8]	; (8000310 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8000306:	6853      	ldr	r3, [r2, #4]
 8000308:	f023 0302 	bic.w	r3, r3, #2
 800030c:	6053      	str	r3, [r2, #4]
 800030e:	4770      	bx	lr
 8000310:	e0042000 	.word	0xe0042000

08000314 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000314:	4a02      	ldr	r2, [pc, #8]	; (8000320 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8000316:	6853      	ldr	r3, [r2, #4]
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	6053      	str	r3, [r2, #4]
 800031e:	4770      	bx	lr
 8000320:	e0042000 	.word	0xe0042000

08000324 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000324:	4a02      	ldr	r2, [pc, #8]	; (8000330 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8000326:	6853      	ldr	r3, [r2, #4]
 8000328:	f023 0304 	bic.w	r3, r3, #4
 800032c:	6053      	str	r3, [r2, #4]
 800032e:	4770      	bx	lr
 8000330:	e0042000 	.word	0xe0042000

08000334 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8000334:	4b01      	ldr	r3, [pc, #4]	; (800033c <HAL_EnableCompensationCell+0x8>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	4770      	bx	lr
 800033c:	42270400 	.word	0x42270400

08000340 <HAL_DisableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8000340:	4b01      	ldr	r3, [pc, #4]	; (8000348 <HAL_DisableCompensationCell+0x8>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	4770      	bx	lr
 8000348:	42270400 	.word	0x42270400

0800034c <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <HAL_GetUID+0x14>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <HAL_GetUID+0x18>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <HAL_GetUID+0x1c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6083      	str	r3, [r0, #8]
 800035e:	4770      	bx	lr
 8000360:	1fff7a10 	.word	0x1fff7a10
 8000364:	1fff7a14 	.word	0x1fff7a14
 8000368:	1fff7a18 	.word	0x1fff7a18

0800036c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800036c:	4a07      	ldr	r2, [pc, #28]	; (800038c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800036e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000370:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000374:	041b      	lsls	r3, r3, #16
 8000376:	0c1b      	lsrs	r3, r3, #16
 8000378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800037c:	0200      	lsls	r0, r0, #8
 800037e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000382:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000386:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000388:	60d3      	str	r3, [r2, #12]
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000390:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000392:	b530      	push	{r4, r5, lr}
 8000394:	68dc      	ldr	r4, [r3, #12]
 8000396:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800039a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800039e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	bf28      	it	cs
 80003a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	f04f 0501 	mov.w	r5, #1
 80003ac:	fa05 f303 	lsl.w	r3, r5, r3
 80003b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b4:	bf8c      	ite	hi
 80003b6:	3c03      	subhi	r4, #3
 80003b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ba:	4019      	ands	r1, r3
 80003bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003be:	fa05 f404 	lsl.w	r4, r5, r4
 80003c2:	3c01      	subs	r4, #1
 80003c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80003c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c8:	ea42 0201 	orr.w	r2, r2, r1
 80003cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	bfaf      	iteee	ge
 80003d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	f000 000f 	andlt.w	r0, r0, #15
 80003da:	4b06      	ldrlt	r3, [pc, #24]	; (80003f4 <HAL_NVIC_SetPriority+0x64>)
 80003dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003de:	bfa5      	ittet	ge
 80003e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	bf00      	nop
 80003f0:	e000ed00 	.word	0xe000ed00
 80003f4:	e000ed14 	.word	0xe000ed14

080003f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003f8:	0942      	lsrs	r2, r0, #5
 80003fa:	2301      	movs	r3, #1
 80003fc:	f000 001f 	and.w	r0, r0, #31
 8000400:	fa03 f000 	lsl.w	r0, r3, r0
 8000404:	4b01      	ldr	r3, [pc, #4]	; (800040c <HAL_NVIC_EnableIRQ+0x14>)
 8000406:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800040a:	4770      	bx	lr
 800040c:	e000e100 	.word	0xe000e100

08000410 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000410:	0943      	lsrs	r3, r0, #5
 8000412:	2201      	movs	r2, #1
 8000414:	f000 001f 	and.w	r0, r0, #31
 8000418:	fa02 f000 	lsl.w	r0, r2, r0
 800041c:	3320      	adds	r3, #32
 800041e:	4a02      	ldr	r2, [pc, #8]	; (8000428 <HAL_NVIC_DisableIRQ+0x18>)
 8000420:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000e100 	.word	0xe000e100

0800042c <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000430:	4905      	ldr	r1, [pc, #20]	; (8000448 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000434:	68ca      	ldr	r2, [r1, #12]
 8000436:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800043a:	4313      	orrs	r3, r2
 800043c:	60cb      	str	r3, [r1, #12]
 800043e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000442:	bf00      	nop
 8000444:	e7fd      	b.n	8000442 <HAL_NVIC_SystemReset+0x16>
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00
 800044c:	05fa0004 	.word	0x05fa0004

08000450 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000450:	3801      	subs	r0, #1
 8000452:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000456:	d20a      	bcs.n	800046e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045a:	4a07      	ldr	r2, [pc, #28]	; (8000478 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045e:	21f0      	movs	r1, #240	; 0xf0
 8000460:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000464:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000466:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000468:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800046e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000e010 	.word	0xe000e010
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800047c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_MPU_Disable+0x18>)
 8000482:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000488:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 800048a:	4b03      	ldr	r3, [pc, #12]	; (8000498 <HAL_MPU_Disable+0x1c>)
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	e000ed90 	.word	0xe000ed90

0800049c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_MPU_Enable+0x1c>)
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800049e:	4a07      	ldr	r2, [pc, #28]	; (80004bc <HAL_MPU_Enable+0x20>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80004a0:	f040 0001 	orr.w	r0, r0, #1
 80004a4:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80004a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004ac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80004ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004b2:	f3bf 8f6f 	isb	sy
 80004b6:	4770      	bx	lr
 80004b8:	e000ed90 	.word	0xe000ed90
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80004c0:	4a12      	ldr	r2, [pc, #72]	; (800050c <HAL_MPU_ConfigRegion+0x4c>)
 80004c2:	7843      	ldrb	r3, [r0, #1]
{
 80004c4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80004c6:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80004c8:	7801      	ldrb	r1, [r0, #0]
 80004ca:	b1d9      	cbz	r1, 8000504 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80004cc:	6843      	ldr	r3, [r0, #4]
 80004ce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80004d0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80004d2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80004d4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80004d6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80004da:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80004dc:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80004de:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80004e2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80004e4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80004e8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80004ea:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80004ee:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80004f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80004f4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80004f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80004fa:	7a01      	ldrb	r1, [r0, #8]
 80004fc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000500:	6113      	str	r3, [r2, #16]
 8000502:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00U;
 8000504:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00U;
 8000506:	6111      	str	r1, [r2, #16]
 8000508:	bd10      	pop	{r4, pc}
 800050a:	bf00      	nop
 800050c:	e000ed90 	.word	0xe000ed90

08000510 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000510:	4b02      	ldr	r3, [pc, #8]	; (800051c <HAL_NVIC_GetPriorityGrouping+0xc>)
 8000512:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8000514:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000520:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) < 0)
 8000522:	2800      	cmp	r0, #0
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000524:	bfad      	iteet	ge
 8000526:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800052a:	f000 000f 	andlt.w	r0, r0, #15
 800052e:	4c11      	ldrlt	r4, [pc, #68]	; (8000574 <HAL_NVIC_GetPriority+0x54>)
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000530:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000534:	f001 0107 	and.w	r1, r1, #7
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000538:	bfb4      	ite	lt
 800053a:	5c25      	ldrblt	r5, [r4, r0]
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800053c:	f890 5300 	ldrbge.w	r5, [r0, #768]	; 0x300
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000540:	f1c1 0007 	rsb	r0, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000544:	1d0c      	adds	r4, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000546:	2804      	cmp	r0, #4
 8000548:	bf28      	it	cs
 800054a:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054c:	2c06      	cmp	r4, #6
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800054e:	ea4f 1515 	mov.w	r5, r5, lsr #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000552:	bf8c      	ite	hi
 8000554:	3903      	subhi	r1, #3
 8000556:	2100      	movls	r1, #0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000558:	2401      	movs	r4, #1
 800055a:	fa25 f601 	lsr.w	r6, r5, r1
 800055e:	fa04 f000 	lsl.w	r0, r4, r0
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000562:	fa04 f101 	lsl.w	r1, r4, r1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000566:	3801      	subs	r0, #1
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000568:	3901      	subs	r1, #1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 800056a:	4030      	ands	r0, r6
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 800056c:	4029      	ands	r1, r5
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 800056e:	6010      	str	r0, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000570:	6019      	str	r1, [r3, #0]
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	e000ed14 	.word	0xe000ed14

08000578 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000578:	0943      	lsrs	r3, r0, #5
 800057a:	2201      	movs	r2, #1
 800057c:	f000 001f 	and.w	r0, r0, #31
 8000580:	fa02 f000 	lsl.w	r0, r2, r0
 8000584:	3340      	adds	r3, #64	; 0x40
 8000586:	4a02      	ldr	r2, [pc, #8]	; (8000590 <HAL_NVIC_SetPendingIRQ+0x18>)
 8000588:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000e100 	.word	0xe000e100

08000594 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000594:	0943      	lsrs	r3, r0, #5
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <HAL_NVIC_GetPendingIRQ+0x18>)
 8000598:	3340      	adds	r3, #64	; 0x40
 800059a:	f000 001f 	and.w	r0, r0, #31
 800059e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a2:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 80005a6:	f000 0001 	and.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005b0:	0943      	lsrs	r3, r0, #5
 80005b2:	2201      	movs	r2, #1
 80005b4:	f000 001f 	and.w	r0, r0, #31
 80005b8:	fa02 f000 	lsl.w	r0, r2, r0
 80005bc:	3360      	adds	r3, #96	; 0x60
 80005be:	4a02      	ldr	r2, [pc, #8]	; (80005c8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80005c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100

080005cc <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80005cc:	0943      	lsrs	r3, r0, #5
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <HAL_NVIC_GetActive+0x18>)
 80005d0:	3380      	adds	r3, #128	; 0x80
 80005d2:	f000 001f 	and.w	r0, r0, #31
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 80005de:	f000 0001 	and.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	e000e100 	.word	0xe000e100

080005e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005ea:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80005ec:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005ee:	bf0c      	ite	eq
 80005f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005f4:	f022 0204 	bicne.w	r2, r2, #4
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	4770      	bx	lr
 80005fc:	e000e010 	.word	0xe000e010

08000600 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000600:	4770      	bx	lr

08000602 <HAL_SYSTICK_IRQHandler>:
{
 8000602:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000604:	f7ff fffc 	bl	8000600 <HAL_SYSTICK_Callback>
 8000608:	bd08      	pop	{r3, pc}
 800060a:	bf00      	nop

0800060c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800060c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000610:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000612:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000614:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80007c4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000618:	4a68      	ldr	r2, [pc, #416]	; (80007bc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800061a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80007c8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000620:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000622:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000626:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000628:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800062c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000630:	45b6      	cmp	lr, r6
 8000632:	f040 80ae 	bne.w	8000792 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000636:	684c      	ldr	r4, [r1, #4]
 8000638:	f024 0710 	bic.w	r7, r4, #16
 800063c:	2f02      	cmp	r7, #2
 800063e:	d116      	bne.n	800066e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000640:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000644:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000648:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800064c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000650:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000654:	f04f 0c0f 	mov.w	ip, #15
 8000658:	fa0c fc0b 	lsl.w	ip, ip, fp
 800065c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000660:	690d      	ldr	r5, [r1, #16]
 8000662:	fa05 f50b 	lsl.w	r5, r5, fp
 8000666:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800066a:	f8ca 5020 	str.w	r5, [sl, #32]
 800066e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000672:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000674:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000678:	fa05 f50a 	lsl.w	r5, r5, sl
 800067c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000682:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000686:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800068c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000690:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000692:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000696:	d811      	bhi.n	80006bc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000698:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800069a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800069e:	68cf      	ldr	r7, [r1, #12]
 80006a0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006a4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006b4:	409f      	lsls	r7, r3
 80006b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006c0:	688f      	ldr	r7, [r1, #8]
 80006c2:	fa07 f70a 	lsl.w	r7, r7, sl
 80006c6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006c8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ca:	00e5      	lsls	r5, r4, #3
 80006cc:	d561      	bpl.n	8000792 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	f04f 0b00 	mov.w	fp, #0
 80006d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80006d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006da:	4d39      	ldr	r5, [pc, #228]	; (80007c0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006dc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006e0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006e8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006ec:	9703      	str	r7, [sp, #12]
 80006ee:	9f03      	ldr	r7, [sp, #12]
 80006f0:	f023 0703 	bic.w	r7, r3, #3
 80006f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006f8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006fc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000700:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000704:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000708:	f04f 0e0f 	mov.w	lr, #15
 800070c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000710:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000712:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000716:	d043      	beq.n	80007a0 <HAL_GPIO_Init+0x194>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	d041      	beq.n	80007a4 <HAL_GPIO_Init+0x198>
 8000720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000724:	42a8      	cmp	r0, r5
 8000726:	d03f      	beq.n	80007a8 <HAL_GPIO_Init+0x19c>
 8000728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072c:	42a8      	cmp	r0, r5
 800072e:	d03d      	beq.n	80007ac <HAL_GPIO_Init+0x1a0>
 8000730:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000734:	42a8      	cmp	r0, r5
 8000736:	d03b      	beq.n	80007b0 <HAL_GPIO_Init+0x1a4>
 8000738:	4548      	cmp	r0, r9
 800073a:	d03b      	beq.n	80007b4 <HAL_GPIO_Init+0x1a8>
 800073c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000740:	42a8      	cmp	r0, r5
 8000742:	d039      	beq.n	80007b8 <HAL_GPIO_Init+0x1ac>
 8000744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000748:	42a8      	cmp	r0, r5
 800074a:	bf14      	ite	ne
 800074c:	2508      	movne	r5, #8
 800074e:	2507      	moveq	r5, #7
 8000750:	fa05 f50c 	lsl.w	r5, r5, ip
 8000754:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000758:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800075a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800075c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000762:	bf0c      	ite	eq
 8000764:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000766:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000768:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800076a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000770:	bf0c      	ite	eq
 8000772:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000774:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000776:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000778:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800077e:	bf0c      	ite	eq
 8000780:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000782:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000784:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000786:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000788:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800078a:	bf54      	ite	pl
 800078c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800078e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000790:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000792:	3301      	adds	r3, #1
 8000794:	2b10      	cmp	r3, #16
 8000796:	f47f af44 	bne.w	8000622 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800079a:	b005      	add	sp, #20
 800079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	465d      	mov	r5, fp
 80007a2:	e7d5      	b.n	8000750 <HAL_GPIO_Init+0x144>
 80007a4:	2501      	movs	r5, #1
 80007a6:	e7d3      	b.n	8000750 <HAL_GPIO_Init+0x144>
 80007a8:	2502      	movs	r5, #2
 80007aa:	e7d1      	b.n	8000750 <HAL_GPIO_Init+0x144>
 80007ac:	2503      	movs	r5, #3
 80007ae:	e7cf      	b.n	8000750 <HAL_GPIO_Init+0x144>
 80007b0:	2504      	movs	r5, #4
 80007b2:	e7cd      	b.n	8000750 <HAL_GPIO_Init+0x144>
 80007b4:	2505      	movs	r5, #5
 80007b6:	e7cb      	b.n	8000750 <HAL_GPIO_Init+0x144>
 80007b8:	2506      	movs	r5, #6
 80007ba:	e7c9      	b.n	8000750 <HAL_GPIO_Init+0x144>
 80007bc:	40013c00 	.word	0x40013c00
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40021400 	.word	0x40021400

080007cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80007cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80007d0:	4e46      	ldr	r6, [pc, #280]	; (80008ec <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80007d2:	f8df a120 	ldr.w	sl, [pc, #288]	; 80008f4 <HAL_GPIO_DeInit+0x128>
 80007d6:	f8df b120 	ldr.w	fp, [pc, #288]	; 80008f8 <HAL_GPIO_DeInit+0x12c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007da:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 80007dc:	f04f 0901 	mov.w	r9, #1
 80007e0:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 80007e4:	ea32 0301 	bics.w	r3, r2, r1
 80007e8:	d16c      	bne.n	80008c4 <HAL_GPIO_DeInit+0xf8>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ea:	2303      	movs	r3, #3
 80007ec:	fa04 f509 	lsl.w	r5, r4, r9
 80007f0:	6807      	ldr	r7, [r0, #0]
 80007f2:	fa03 f505 	lsl.w	r5, r3, r5
 80007f6:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007f8:	fa24 fc03 	lsr.w	ip, r4, r3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007fc:	402f      	ands	r7, r5
 80007fe:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000802:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000804:	f004 0e07 	and.w	lr, r4, #7
 8000808:	f8dc 8020 	ldr.w	r8, [ip, #32]
 800080c:	270f      	movs	r7, #15
 800080e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000812:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000816:	ea28 0e0e 	bic.w	lr, r8, lr
 800081a:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800081e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000822:	ea05 0e0e 	and.w	lr, r5, lr
 8000826:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800082a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800082e:	43d2      	mvns	r2, r2
 8000830:	ea02 0e0e 	and.w	lr, r2, lr
 8000834:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000838:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800083c:	ea05 050e 	and.w	r5, r5, lr
 8000840:	60c5      	str	r5, [r0, #12]
 8000842:	f024 0503 	bic.w	r5, r4, #3
 8000846:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800084a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800084e:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000852:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000854:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000858:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800085c:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000860:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000862:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000866:	d032      	beq.n	80008ce <HAL_GPIO_DeInit+0x102>
 8000868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800086c:	4298      	cmp	r0, r3
 800086e:	d030      	beq.n	80008d2 <HAL_GPIO_DeInit+0x106>
 8000870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000874:	4298      	cmp	r0, r3
 8000876:	d02e      	beq.n	80008d6 <HAL_GPIO_DeInit+0x10a>
 8000878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800087c:	4298      	cmp	r0, r3
 800087e:	d02c      	beq.n	80008da <HAL_GPIO_DeInit+0x10e>
 8000880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000884:	4298      	cmp	r0, r3
 8000886:	d02a      	beq.n	80008de <HAL_GPIO_DeInit+0x112>
 8000888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800088c:	4298      	cmp	r0, r3
 800088e:	d028      	beq.n	80008e2 <HAL_GPIO_DeInit+0x116>
 8000890:	4550      	cmp	r0, sl
 8000892:	d028      	beq.n	80008e6 <HAL_GPIO_DeInit+0x11a>
 8000894:	4558      	cmp	r0, fp
 8000896:	bf0c      	ite	eq
 8000898:	2307      	moveq	r3, #7
 800089a:	2308      	movne	r3, #8
 800089c:	fa03 f30e 	lsl.w	r3, r3, lr
 80008a0:	459c      	cmp	ip, r3
 80008a2:	d10f      	bne.n	80008c4 <HAL_GPIO_DeInit+0xf8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80008a4:	68ab      	ldr	r3, [r5, #8]
 80008a6:	ea23 0707 	bic.w	r7, r3, r7
 80008aa:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80008ac:	6833      	ldr	r3, [r6, #0]
 80008ae:	4013      	ands	r3, r2
 80008b0:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80008b2:	6873      	ldr	r3, [r6, #4]
 80008b4:	4013      	ands	r3, r2
 80008b6:	6073      	str	r3, [r6, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80008b8:	68b3      	ldr	r3, [r6, #8]
 80008ba:	4013      	ands	r3, r2
 80008bc:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008be:	68f3      	ldr	r3, [r6, #12]
 80008c0:	401a      	ands	r2, r3
 80008c2:	60f2      	str	r2, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c4:	3401      	adds	r4, #1
 80008c6:	2c10      	cmp	r4, #16
 80008c8:	d188      	bne.n	80007dc <HAL_GPIO_DeInit+0x10>
      }
    }
  }
}
 80008ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80008ce:	2300      	movs	r3, #0
 80008d0:	e7e4      	b.n	800089c <HAL_GPIO_DeInit+0xd0>
 80008d2:	464b      	mov	r3, r9
 80008d4:	e7e2      	b.n	800089c <HAL_GPIO_DeInit+0xd0>
 80008d6:	2302      	movs	r3, #2
 80008d8:	e7e0      	b.n	800089c <HAL_GPIO_DeInit+0xd0>
 80008da:	2303      	movs	r3, #3
 80008dc:	e7de      	b.n	800089c <HAL_GPIO_DeInit+0xd0>
 80008de:	2304      	movs	r3, #4
 80008e0:	e7dc      	b.n	800089c <HAL_GPIO_DeInit+0xd0>
 80008e2:	2305      	movs	r3, #5
 80008e4:	e7da      	b.n	800089c <HAL_GPIO_DeInit+0xd0>
 80008e6:	2306      	movs	r3, #6
 80008e8:	e7d8      	b.n	800089c <HAL_GPIO_DeInit+0xd0>
 80008ea:	bf00      	nop
 80008ec:	40013c00 	.word	0x40013c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40021800 	.word	0x40021800
 80008f8:	40021c00 	.word	0x40021c00

080008fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008fc:	6903      	ldr	r3, [r0, #16]
 80008fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000900:	bf14      	ite	ne
 8000902:	2001      	movne	r0, #1
 8000904:	2000      	moveq	r0, #0
 8000906:	4770      	bx	lr

08000908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000908:	b10a      	cbz	r2, 800090e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800090a:	6181      	str	r1, [r0, #24]
 800090c:	4770      	bx	lr
 800090e:	0409      	lsls	r1, r1, #16
 8000910:	e7fb      	b.n	800090a <HAL_GPIO_WritePin+0x2>

08000912 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000912:	6943      	ldr	r3, [r0, #20]
 8000914:	4059      	eors	r1, r3
 8000916:	6141      	str	r1, [r0, #20]
 8000918:	4770      	bx	lr

0800091a <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800091a:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800091c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000920:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8000922:	9b01      	ldr	r3, [sp, #4]
 8000924:	430b      	orrs	r3, r1
 8000926:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000928:	9b01      	ldr	r3, [sp, #4]
 800092a:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800092c:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800092e:	9b01      	ldr	r3, [sp, #4]
 8000930:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000932:	69c3      	ldr	r3, [r0, #28]
 8000934:	9301      	str	r3, [sp, #4]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8000936:	69c0      	ldr	r0, [r0, #28]
 8000938:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 800093c:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8000940:	b002      	add	sp, #8
 8000942:	4770      	bx	lr

08000944 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000944:	4770      	bx	lr

08000946 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000946:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GPIO_EXTI_IRQHandler+0x12>)
 800094a:	6959      	ldr	r1, [r3, #20]
 800094c:	4201      	tst	r1, r0
 800094e:	d002      	beq.n	8000956 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000950:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000952:	f7ff fff7 	bl	8000944 <HAL_GPIO_EXTI_Callback>
 8000956:	bd08      	pop	{r3, pc}
 8000958:	40013c00 	.word	0x40013c00
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
  return HAL_OK;
}
 800095c:	2000      	movs	r0, #0
 800095e:	4770      	bx	lr

08000960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000962:	4604      	mov	r4, r0
 8000964:	b910      	cbnz	r0, 800096c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000966:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000968:	b003      	add	sp, #12
 800096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800096c:	6803      	ldr	r3, [r0, #0]
 800096e:	07d8      	lsls	r0, r3, #31
 8000970:	d43b      	bmi.n	80009ea <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	0799      	lsls	r1, r3, #30
 8000976:	f100 8084 	bmi.w	8000a82 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	071e      	lsls	r6, r3, #28
 800097e:	f100 80c6 	bmi.w	8000b0e <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	075d      	lsls	r5, r3, #29
 8000986:	d52a      	bpl.n	80009de <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	4baa      	ldr	r3, [pc, #680]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800098e:	4dab      	ldr	r5, [pc, #684]	; (8000c3c <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80009aa:	f7ff fc5b 	bl	8000264 <HAL_GetTick>
 80009ae:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	05da      	lsls	r2, r3, #23
 80009b4:	f140 80cd 	bpl.w	8000b52 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009b8:	68a3      	ldr	r3, [r4, #8]
 80009ba:	4d9f      	ldr	r5, [pc, #636]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
 80009bc:	2b01      	cmp	r3, #1
 80009be:	f040 80cf 	bne.w	8000b60 <HAL_RCC_OscConfig+0x200>
 80009c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009ca:	f7ff fc4b 	bl	8000264 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ce:	4d9a      	ldr	r5, [pc, #616]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009d0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009d2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009d8:	079b      	lsls	r3, r3, #30
 80009da:	f140 80e2 	bpl.w	8000ba2 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009de:	69a2      	ldr	r2, [r4, #24]
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	f040 80e5 	bne.w	8000bb0 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 80009e6:	2000      	movs	r0, #0
 80009e8:	e7be      	b.n	8000968 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009ea:	4b93      	ldr	r3, [pc, #588]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	f002 020c 	and.w	r2, r2, #12
 80009f2:	2a04      	cmp	r2, #4
 80009f4:	d007      	beq.n	8000a06 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009fc:	2a08      	cmp	r2, #8
 80009fe:	d10a      	bne.n	8000a16 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	025a      	lsls	r2, r3, #9
 8000a04:	d507      	bpl.n	8000a16 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a06:	4b8c      	ldr	r3, [pc, #560]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	039b      	lsls	r3, r3, #14
 8000a0c:	d5b1      	bpl.n	8000972 <HAL_RCC_OscConfig+0x12>
 8000a0e:	6863      	ldr	r3, [r4, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1ae      	bne.n	8000972 <HAL_RCC_OscConfig+0x12>
 8000a14:	e7a7      	b.n	8000966 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a16:	6863      	ldr	r3, [r4, #4]
 8000a18:	4d87      	ldr	r5, [pc, #540]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
 8000a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a1e:	d111      	bne.n	8000a44 <HAL_RCC_OscConfig+0xe4>
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a28:	f7ff fc1c 	bl	8000264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2c:	4d82      	ldr	r5, [pc, #520]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	039f      	lsls	r7, r3, #14
 8000a34:	d49d      	bmi.n	8000972 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a36:	f7ff fc15 	bl	8000264 <HAL_GetTick>
 8000a3a:	1b80      	subs	r0, r0, r6
 8000a3c:	2864      	cmp	r0, #100	; 0x64
 8000a3e:	d9f7      	bls.n	8000a30 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000a40:	2003      	movs	r0, #3
 8000a42:	e791      	b.n	8000968 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a48:	d104      	bne.n	8000a54 <HAL_RCC_OscConfig+0xf4>
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a50:	602b      	str	r3, [r5, #0]
 8000a52:	e7e5      	b.n	8000a20 <HAL_RCC_OscConfig+0xc0>
 8000a54:	682a      	ldr	r2, [r5, #0]
 8000a56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a5a:	602a      	str	r2, [r5, #0]
 8000a5c:	682a      	ldr	r2, [r5, #0]
 8000a5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a62:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1df      	bne.n	8000a28 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8000a68:	f7ff fbfc 	bl	8000264 <HAL_GetTick>
 8000a6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a6e:	682b      	ldr	r3, [r5, #0]
 8000a70:	0398      	lsls	r0, r3, #14
 8000a72:	f57f af7e 	bpl.w	8000972 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a76:	f7ff fbf5 	bl	8000264 <HAL_GetTick>
 8000a7a:	1b80      	subs	r0, r0, r6
 8000a7c:	2864      	cmp	r0, #100	; 0x64
 8000a7e:	d9f6      	bls.n	8000a6e <HAL_RCC_OscConfig+0x10e>
 8000a80:	e7de      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a82:	4b6d      	ldr	r3, [pc, #436]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	f012 0f0c 	tst.w	r2, #12
 8000a8a:	d007      	beq.n	8000a9c <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a92:	2a08      	cmp	r2, #8
 8000a94:	d112      	bne.n	8000abc <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	0259      	lsls	r1, r3, #9
 8000a9a:	d40f      	bmi.n	8000abc <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a9c:	4b66      	ldr	r3, [pc, #408]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	0792      	lsls	r2, r2, #30
 8000aa2:	d503      	bpl.n	8000aac <HAL_RCC_OscConfig+0x14c>
 8000aa4:	68e2      	ldr	r2, [r4, #12]
 8000aa6:	2a01      	cmp	r2, #1
 8000aa8:	f47f af5d 	bne.w	8000966 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	6921      	ldr	r1, [r4, #16]
 8000ab0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ab4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ab8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aba:	e75e      	b.n	800097a <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000abc:	68e2      	ldr	r2, [r4, #12]
 8000abe:	4b60      	ldr	r3, [pc, #384]	; (8000c40 <HAL_RCC_OscConfig+0x2e0>)
 8000ac0:	b1b2      	cbz	r2, 8000af0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ac6:	f7ff fbcd 	bl	8000264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aca:	4d5b      	ldr	r5, [pc, #364]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000acc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ace:	682b      	ldr	r3, [r5, #0]
 8000ad0:	079b      	lsls	r3, r3, #30
 8000ad2:	d507      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	6922      	ldr	r2, [r4, #16]
 8000ad8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000adc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ae0:	602b      	str	r3, [r5, #0]
 8000ae2:	e74a      	b.n	800097a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ae4:	f7ff fbbe 	bl	8000264 <HAL_GetTick>
 8000ae8:	1b80      	subs	r0, r0, r6
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9ef      	bls.n	8000ace <HAL_RCC_OscConfig+0x16e>
 8000aee:	e7a7      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000af0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000af2:	f7ff fbb7 	bl	8000264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000af6:	4d50      	ldr	r5, [pc, #320]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000af8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	079f      	lsls	r7, r3, #30
 8000afe:	f57f af3c 	bpl.w	800097a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b02:	f7ff fbaf 	bl	8000264 <HAL_GetTick>
 8000b06:	1b80      	subs	r0, r0, r6
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	d9f6      	bls.n	8000afa <HAL_RCC_OscConfig+0x19a>
 8000b0c:	e798      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b0e:	6962      	ldr	r2, [r4, #20]
 8000b10:	4b4c      	ldr	r3, [pc, #304]	; (8000c44 <HAL_RCC_OscConfig+0x2e4>)
 8000b12:	b17a      	cbz	r2, 8000b34 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b18:	f7ff fba4 	bl	8000264 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b1c:	4d46      	ldr	r5, [pc, #280]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000b1e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b20:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b22:	0798      	lsls	r0, r3, #30
 8000b24:	f53f af2d 	bmi.w	8000982 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b28:	f7ff fb9c 	bl	8000264 <HAL_GetTick>
 8000b2c:	1b80      	subs	r0, r0, r6
 8000b2e:	2802      	cmp	r0, #2
 8000b30:	d9f6      	bls.n	8000b20 <HAL_RCC_OscConfig+0x1c0>
 8000b32:	e785      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000b34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b36:	f7ff fb95 	bl	8000264 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b3a:	4d3f      	ldr	r5, [pc, #252]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000b3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b40:	0799      	lsls	r1, r3, #30
 8000b42:	f57f af1e 	bpl.w	8000982 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b46:	f7ff fb8d 	bl	8000264 <HAL_GetTick>
 8000b4a:	1b80      	subs	r0, r0, r6
 8000b4c:	2802      	cmp	r0, #2
 8000b4e:	d9f6      	bls.n	8000b3e <HAL_RCC_OscConfig+0x1de>
 8000b50:	e776      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b52:	f7ff fb87 	bl	8000264 <HAL_GetTick>
 8000b56:	1b80      	subs	r0, r0, r6
 8000b58:	2802      	cmp	r0, #2
 8000b5a:	f67f af29 	bls.w	80009b0 <HAL_RCC_OscConfig+0x50>
 8000b5e:	e76f      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b60:	2b05      	cmp	r3, #5
 8000b62:	d104      	bne.n	8000b6e <HAL_RCC_OscConfig+0x20e>
 8000b64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	672b      	str	r3, [r5, #112]	; 0x70
 8000b6c:	e729      	b.n	80009c2 <HAL_RCC_OscConfig+0x62>
 8000b6e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b70:	f022 0201 	bic.w	r2, r2, #1
 8000b74:	672a      	str	r2, [r5, #112]	; 0x70
 8000b76:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b78:	f022 0204 	bic.w	r2, r2, #4
 8000b7c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f47f af23 	bne.w	80009ca <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000b84:	f7ff fb6e 	bl	8000264 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b88:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b8e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b90:	0798      	lsls	r0, r3, #30
 8000b92:	f57f af24 	bpl.w	80009de <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b96:	f7ff fb65 	bl	8000264 <HAL_GetTick>
 8000b9a:	1b80      	subs	r0, r0, r6
 8000b9c:	42b8      	cmp	r0, r7
 8000b9e:	d9f6      	bls.n	8000b8e <HAL_RCC_OscConfig+0x22e>
 8000ba0:	e74e      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba2:	f7ff fb5f 	bl	8000264 <HAL_GetTick>
 8000ba6:	1b80      	subs	r0, r0, r6
 8000ba8:	42b8      	cmp	r0, r7
 8000baa:	f67f af14 	bls.w	80009d6 <HAL_RCC_OscConfig+0x76>
 8000bae:	e747      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000bb0:	4d21      	ldr	r5, [pc, #132]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
 8000bb2:	68ab      	ldr	r3, [r5, #8]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	f43f aed4 	beq.w	8000966 <HAL_RCC_OscConfig+0x6>
 8000bbe:	4e22      	ldr	r6, [pc, #136]	; (8000c48 <HAL_RCC_OscConfig+0x2e8>)
 8000bc0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000bc4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc6:	d12a      	bne.n	8000c1e <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fb4c 	bl	8000264 <HAL_GetTick>
 8000bcc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	0199      	lsls	r1, r3, #6
 8000bd2:	d41e      	bmi.n	8000c12 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bd4:	6a22      	ldr	r2, [r4, #32]
 8000bd6:	69e3      	ldr	r3, [r4, #28]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bdc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000be0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000be2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000be6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be8:	4c13      	ldr	r4, [pc, #76]	; (8000c38 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bea:	0852      	lsrs	r2, r2, #1
 8000bec:	3a01      	subs	r2, #1
 8000bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fb34 	bl	8000264 <HAL_GetTick>
 8000bfc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	019a      	lsls	r2, r3, #6
 8000c02:	f53f aef0 	bmi.w	80009e6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c06:	f7ff fb2d 	bl	8000264 <HAL_GetTick>
 8000c0a:	1b40      	subs	r0, r0, r5
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f6      	bls.n	8000bfe <HAL_RCC_OscConfig+0x29e>
 8000c10:	e716      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c12:	f7ff fb27 	bl	8000264 <HAL_GetTick>
 8000c16:	1bc0      	subs	r0, r0, r7
 8000c18:	2802      	cmp	r0, #2
 8000c1a:	d9d8      	bls.n	8000bce <HAL_RCC_OscConfig+0x26e>
 8000c1c:	e710      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fb21 	bl	8000264 <HAL_GetTick>
 8000c22:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	019b      	lsls	r3, r3, #6
 8000c28:	f57f aedd 	bpl.w	80009e6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c2c:	f7ff fb1a 	bl	8000264 <HAL_GetTick>
 8000c30:	1b00      	subs	r0, r0, r4
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d9f6      	bls.n	8000c24 <HAL_RCC_OscConfig+0x2c4>
 8000c36:	e703      	b.n	8000a40 <HAL_RCC_OscConfig+0xe0>
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000
 8000c40:	42470000 	.word	0x42470000
 8000c44:	42470e80 	.word	0x42470e80
 8000c48:	42470060 	.word	0x42470060

08000c4c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	460d      	mov	r5, r1
 8000c50:	b088      	sub	sp, #32
 8000c52:	4616      	mov	r6, r2
 8000c54:	4c20      	ldr	r4, [pc, #128]	; (8000cd8 <HAL_RCC_MCOConfig+0x8c>)
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000c56:	b9f0      	cbnz	r0, 8000c96 <HAL_RCC_MCOConfig+0x4a>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8000c58:	9001      	str	r0, [sp, #4]
 8000c5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6323      	str	r3, [r4, #48]	; 0x30
 8000c62:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	9005      	str	r0, [sp, #20]
    __MCO1_CLK_ENABLE();
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c6e:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000c7a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000c7e:	4817      	ldr	r0, [pc, #92]	; (8000cdc <HAL_RCC_MCOConfig+0x90>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000c82:	f7ff fcc3 	bl	800060c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000c86:	68a1      	ldr	r1, [r4, #8]
 8000c88:	f021 61ec 	bic.w	r1, r1, #123731968	; 0x7600000
 8000c8c:	4331      	orrs	r1, r6
 8000c8e:	4329      	orrs	r1, r5
 8000c90:	60a1      	str	r1, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000c92:	b008      	add	sp, #32
 8000c94:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	9302      	str	r3, [sp, #8]
 8000c9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000c9c:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_RCC_MCOConfig+0x94>)
    __MCO2_CLK_ENABLE();
 8000c9e:	f042 0204 	orr.w	r2, r2, #4
 8000ca2:	6322      	str	r2, [r4, #48]	; 0x30
 8000ca4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	9305      	str	r3, [sp, #20]
    __MCO2_CLK_ENABLE();
 8000ca8:	f002 0204 	and.w	r2, r2, #4
 8000cac:	9202      	str	r2, [sp, #8]
 8000cae:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000cb0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2202      	movs	r2, #2
 8000cba:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000cbc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000cc2:	f7ff fca3 	bl	800060c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000cc6:	68a3      	ldr	r3, [r4, #8]
 8000cc8:	ea45 01c6 	orr.w	r1, r5, r6, lsl #3
 8000ccc:	f023 4578 	bic.w	r5, r3, #4160749568	; 0xf8000000
 8000cd0:	430d      	orrs	r5, r1
 8000cd2:	60a5      	str	r5, [r4, #8]
}
 8000cd4:	e7dd      	b.n	8000c92 <HAL_RCC_MCOConfig+0x46>
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020800 	.word	0x40020800

08000ce4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8000ce4:	4b01      	ldr	r3, [pc, #4]	; (8000cec <HAL_RCC_EnableCSS+0x8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	4770      	bx	lr
 8000cec:	4247004c 	.word	0x4247004c

08000cf0 <HAL_RCC_DisableCSS>:
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8000cf0:	4b01      	ldr	r3, [pc, #4]	; (8000cf8 <HAL_RCC_DisableCSS+0x8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	4770      	bx	lr
 8000cf8:	4247004c 	.word	0x4247004c

08000cfc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cfc:	4913      	ldr	r1, [pc, #76]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000cfe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d00:	688b      	ldr	r3, [r1, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d003      	beq.n	8000d12 <HAL_RCC_GetSysClockFreq+0x16>
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d003      	beq.n	8000d16 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d0e:	4810      	ldr	r0, [pc, #64]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d10:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d14:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d18:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d1a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d1c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d20:	bf14      	ite	ne
 8000d22:	480c      	ldrne	r0, [pc, #48]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d24:	480a      	ldreq	r0, [pc, #40]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d26:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d2a:	bf18      	it	ne
 8000d2c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d32:	fba1 0100 	umull	r0, r1, r1, r0
 8000d36:	f000 f9eb 	bl	8001110 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x50>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d42:	3301      	adds	r3, #1
 8000d44:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000d46:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d4a:	bd08      	pop	{r3, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	00f42400 	.word	0x00f42400
 8000d54:	007a1200 	.word	0x007a1200

08000d58 <HAL_RCC_ClockConfig>:
{
 8000d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d5e:	4604      	mov	r4, r0
 8000d60:	b910      	cbnz	r0, 8000d68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d62:	2001      	movs	r0, #1
 8000d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <HAL_RCC_ClockConfig+0x124>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f002 020f 	and.w	r2, r2, #15
 8000d70:	428a      	cmp	r2, r1
 8000d72:	d328      	bcc.n	8000dc6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d74:	6821      	ldr	r1, [r4, #0]
 8000d76:	078f      	lsls	r7, r1, #30
 8000d78:	d42d      	bmi.n	8000dd6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d7a:	07c8      	lsls	r0, r1, #31
 8000d7c:	d440      	bmi.n	8000e00 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <HAL_RCC_ClockConfig+0x124>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f002 020f 	and.w	r2, r2, #15
 8000d86:	4295      	cmp	r5, r2
 8000d88:	d366      	bcc.n	8000e58 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	0751      	lsls	r1, r2, #29
 8000d8e:	d46c      	bmi.n	8000e6a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d90:	0713      	lsls	r3, r2, #28
 8000d92:	d507      	bpl.n	8000da4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d94:	4a3a      	ldr	r2, [pc, #232]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000d96:	6921      	ldr	r1, [r4, #16]
 8000d98:	6893      	ldr	r3, [r2, #8]
 8000d9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000da2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000da4:	f7ff ffaa 	bl	8000cfc <HAL_RCC_GetSysClockFreq>
 8000da8:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000daa:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <HAL_RCC_ClockConfig+0x12c>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	40d8      	lsrs	r0, r3
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <HAL_RCC_ClockConfig+0x130>)
 8000db8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fa1c 	bl	80001f8 <HAL_InitTick>
  return HAL_OK;
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d1c6      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xa>
 8000dd4:	e7ce      	b.n	8000d74 <HAL_RCC_ClockConfig+0x1c>
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ddc:	bf1e      	ittt	ne
 8000dde:	689a      	ldrne	r2, [r3, #8]
 8000de0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000de4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000de6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000de8:	bf42      	ittt	mi
 8000dea:	689a      	ldrmi	r2, [r3, #8]
 8000dec:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000df0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	68a0      	ldr	r0, [r4, #8]
 8000df6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000dfa:	4302      	orrs	r2, r0
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	e7bc      	b.n	8000d7a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e00:	6862      	ldr	r2, [r4, #4]
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000e04:	2a01      	cmp	r2, #1
 8000e06:	d11d      	bne.n	8000e44 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0e:	d0a8      	beq.n	8000d62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e10:	4e1b      	ldr	r6, [pc, #108]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000e12:	68b3      	ldr	r3, [r6, #8]
 8000e14:	f023 0303 	bic.w	r3, r3, #3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e1c:	f7ff fa22 	bl	8000264 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e20:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e24:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e26:	68b3      	ldr	r3, [r6, #8]
 8000e28:	6862      	ldr	r2, [r4, #4]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e32:	d0a4      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e34:	f7ff fa16 	bl	8000264 <HAL_GetTick>
 8000e38:	1bc0      	subs	r0, r0, r7
 8000e3a:	4540      	cmp	r0, r8
 8000e3c:	d9f3      	bls.n	8000e26 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000e3e:	2003      	movs	r0, #3
}
 8000e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e44:	1e91      	subs	r1, r2, #2
 8000e46:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e48:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e4a:	d802      	bhi.n	8000e52 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e50:	e7dd      	b.n	8000e0e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e52:	f013 0f02 	tst.w	r3, #2
 8000e56:	e7da      	b.n	8000e0e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e58:	b2ea      	uxtb	r2, r5
 8000e5a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	429d      	cmp	r5, r3
 8000e64:	f47f af7d 	bne.w	8000d62 <HAL_RCC_ClockConfig+0xa>
 8000e68:	e78f      	b.n	8000d8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e6a:	4905      	ldr	r1, [pc, #20]	; (8000e80 <HAL_RCC_ClockConfig+0x128>)
 8000e6c:	68e0      	ldr	r0, [r4, #12]
 8000e6e:	688b      	ldr	r3, [r1, #8]
 8000e70:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e74:	4303      	orrs	r3, r0
 8000e76:	608b      	str	r3, [r1, #8]
 8000e78:	e78a      	b.n	8000d90 <HAL_RCC_ClockConfig+0x38>
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00
 8000e80:	40023800 	.word	0x40023800
 8000e84:	08001658 	.word	0x08001658
 8000e88:	20000000 	.word	0x20000000

08000e8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000e8c:	4b01      	ldr	r3, [pc, #4]	; (8000e94 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000

08000e98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ea6:	6810      	ldr	r0, [r2, #0]
}
 8000ea8:	40d8      	lsrs	r0, r3
 8000eaa:	4770      	bx	lr
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	08001668 	.word	0x08001668
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ec2:	5cd3      	ldrb	r3, [r2, r3]
 8000ec4:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ec6:	6810      	ldr	r0, [r2, #0]
}
 8000ec8:	40d8      	lsrs	r0, r3
 8000eca:	4770      	bx	lr
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	08001668 	.word	0x08001668
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_RCC_GetOscConfig>:
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	6003      	str	r3, [r0, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_RCC_GetOscConfig+0x98>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	0352      	lsls	r2, r2, #13
 8000ee2:	d537      	bpl.n	8000f54 <HAL_RCC_GetOscConfig+0x7c>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8000ee4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8000ee8:	6042      	str	r2, [r0, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8000ef0:	bf18      	it	ne
 8000ef2:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8000ef4:	60c3      	str	r3, [r0, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <HAL_RCC_GetOscConfig+0x98>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8000efe:	6102      	str	r2, [r0, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8000f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f02:	0751      	lsls	r1, r2, #29
 8000f04:	d52d      	bpl.n	8000f62 <HAL_RCC_GetOscConfig+0x8a>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8000f06:	2205      	movs	r2, #5
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8000f08:	6082      	str	r2, [r0, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8000f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f0c:	f013 0301 	ands.w	r3, r3, #1
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8000f10:	bf18      	it	ne
 8000f12:	2301      	movne	r3, #1
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8000f14:	6143      	str	r3, [r0, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_RCC_GetOscConfig+0x98>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	01d2      	lsls	r2, r2, #7
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8000f1c:	bf4c      	ite	mi
 8000f1e:	2202      	movmi	r2, #2
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8000f20:	2201      	movpl	r2, #1
 8000f22:	6182      	str	r2, [r0, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000f2a:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f32:	6202      	str	r2, [r0, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8000f3a:	6242      	str	r2, [r0, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000f42:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f46:	0bd2      	lsrs	r2, r2, #15
 8000f48:	6282      	str	r2, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8000f50:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000f52:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8000f5a:	bf18      	it	ne
 8000f5c:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8000f60:	e7c2      	b.n	8000ee8 <HAL_RCC_GetOscConfig+0x10>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8000f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f64:	f012 0201 	ands.w	r2, r2, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8000f68:	bf18      	it	ne
 8000f6a:	2201      	movne	r2, #1
 8000f6c:	e7cc      	b.n	8000f08 <HAL_RCC_GetOscConfig+0x30>
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f74:	230f      	movs	r3, #15
 8000f76:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_RCC_GetClockConfig+0x34>)
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	f002 0203 	and.w	r2, r2, #3
 8000f80:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000f88:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000f90:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f9a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_RCC_GetClockConfig+0x38>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	600b      	str	r3, [r1, #0]
 8000fa6:	4770      	bx	lr
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_RCC_NMI_IRQHandler>:
{
 8000fb2:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_RCC_NMI_IRQHandler+0x16>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	061b      	lsls	r3, r3, #24
 8000fba:	d504      	bpl.n	8000fc6 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8000fbc:	f7ff fff8 	bl	8000fb0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <HAL_RCC_NMI_IRQHandler+0x1a>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	bd08      	pop	{r3, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	4002380e 	.word	0x4002380e

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f7ff f9ca 	bl	800036c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4611      	mov	r1, r2
 8000fdc:	f06f 000b 	mvn.w	r0, #11
 8000fe0:	f7ff f9d6 	bl	8000390 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	f06f 000a 	mvn.w	r0, #10
 8000fec:	f7ff f9d0 	bl	8000390 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	f06f 0009 	mvn.w	r0, #9
 8000ff8:	f7ff f9ca 	bl	8000390 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4611      	mov	r1, r2
 8001000:	f06f 0004 	mvn.w	r0, #4
 8001004:	f7ff f9c4 	bl	8000390 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	4611      	mov	r1, r2
 800100c:	f06f 0003 	mvn.w	r0, #3
 8001010:	f7ff f9be 	bl	8000390 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	4611      	mov	r1, r2
 8001018:	f06f 0001 	mvn.w	r0, #1
 800101c:	f7ff f9b8 	bl	8000390 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	4611      	mov	r1, r2
 8001024:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800102c:	f7ff b9b0 	b.w	8000390 <HAL_NVIC_SetPriority>

08001030 <NMI_Handler>:
 8001030:	4770      	bx	lr

08001032 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler>

08001034 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler>

08001036 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler>

08001038 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler>

0800103a <SVC_Handler>:
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001040:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f7ff f907 	bl	8000254 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800104a:	f7ff bada 	b.w	8000602 <HAL_SYSTICK_IRQHandler>
	...

08001050 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	490f      	ldr	r1, [pc, #60]	; (8001090 <SystemInit+0x40>)
 8001052:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <SystemInit+0x44>)
 8001060:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001062:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001064:	f042 0201 	orr.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800106a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001072:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001076:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <SystemInit+0x48>)
 800107a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001082:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001084:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800108a:	608b      	str	r3, [r1, #8]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	40023800 	.word	0x40023800
 8001098:	24003010 	.word	0x24003010

0800109c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <SystemCoreClockUpdate+0x60>)
 800109e:	4918      	ldr	r1, [pc, #96]	; (8001100 <SystemCoreClockUpdate+0x64>)
 80010a0:	6893      	ldr	r3, [r2, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80010a6:	2b04      	cmp	r3, #4
{
 80010a8:	b510      	push	{r4, lr}
  switch (tmp)
 80010aa:	d00d      	beq.n	80010c8 <SystemCoreClockUpdate+0x2c>
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d00d      	beq.n	80010cc <SystemCoreClockUpdate+0x30>
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <SystemCoreClockUpdate+0x68>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80010b2:	600b      	str	r3, [r1, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <SystemCoreClockUpdate+0x60>)
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <SystemCoreClockUpdate+0x6c>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010be:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80010c0:	680b      	ldr	r3, [r1, #0]
 80010c2:	40d3      	lsrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
 80010c6:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <SystemCoreClockUpdate+0x70>)
 80010ca:	e7f2      	b.n	80010b2 <SystemCoreClockUpdate+0x16>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80010cc:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010ce:	6850      	ldr	r0, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010d0:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 80010d2:	0263      	lsls	r3, r4, #9
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010d4:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010dc:	bf4c      	ite	mi
 80010de:	4b0b      	ldrmi	r3, [pc, #44]	; (800110c <SystemCoreClockUpdate+0x70>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010e0:	4b08      	ldrpl	r3, [pc, #32]	; (8001104 <SystemCoreClockUpdate+0x68>)
 80010e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80010e6:	4353      	muls	r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <SystemCoreClockUpdate+0x60>)
 80010ea:	6852      	ldr	r2, [r2, #4]
 80010ec:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80010f0:	3201      	adds	r2, #1
 80010f2:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 80010f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010f8:	e7db      	b.n	80010b2 <SystemCoreClockUpdate+0x16>
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	20000000 	.word	0x20000000
 8001104:	00f42400 	.word	0x00f42400
 8001108:	08001658 	.word	0x08001658
 800110c:	007a1200 	.word	0x007a1200

08001110 <__aeabi_uldivmod>:
 8001110:	b953      	cbnz	r3, 8001128 <__aeabi_uldivmod+0x18>
 8001112:	b94a      	cbnz	r2, 8001128 <__aeabi_uldivmod+0x18>
 8001114:	2900      	cmp	r1, #0
 8001116:	bf08      	it	eq
 8001118:	2800      	cmpeq	r0, #0
 800111a:	bf1c      	itt	ne
 800111c:	f04f 31ff 	movne.w	r1, #4294967295
 8001120:	f04f 30ff 	movne.w	r0, #4294967295
 8001124:	f000 b97a 	b.w	800141c <__aeabi_idiv0>
 8001128:	f1ad 0c08 	sub.w	ip, sp, #8
 800112c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001130:	f000 f806 	bl	8001140 <__udivmoddi4>
 8001134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr

08001140 <__udivmoddi4>:
 8001140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001144:	468c      	mov	ip, r1
 8001146:	460d      	mov	r5, r1
 8001148:	4604      	mov	r4, r0
 800114a:	9e08      	ldr	r6, [sp, #32]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d151      	bne.n	80011f4 <__udivmoddi4+0xb4>
 8001150:	428a      	cmp	r2, r1
 8001152:	4617      	mov	r7, r2
 8001154:	d96d      	bls.n	8001232 <__udivmoddi4+0xf2>
 8001156:	fab2 fe82 	clz	lr, r2
 800115a:	f1be 0f00 	cmp.w	lr, #0
 800115e:	d00b      	beq.n	8001178 <__udivmoddi4+0x38>
 8001160:	f1ce 0c20 	rsb	ip, lr, #32
 8001164:	fa01 f50e 	lsl.w	r5, r1, lr
 8001168:	fa20 fc0c 	lsr.w	ip, r0, ip
 800116c:	fa02 f70e 	lsl.w	r7, r2, lr
 8001170:	ea4c 0c05 	orr.w	ip, ip, r5
 8001174:	fa00 f40e 	lsl.w	r4, r0, lr
 8001178:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800117c:	0c25      	lsrs	r5, r4, #16
 800117e:	fbbc f8fa 	udiv	r8, ip, sl
 8001182:	fa1f f987 	uxth.w	r9, r7
 8001186:	fb0a cc18 	mls	ip, sl, r8, ip
 800118a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800118e:	fb08 f309 	mul.w	r3, r8, r9
 8001192:	42ab      	cmp	r3, r5
 8001194:	d90a      	bls.n	80011ac <__udivmoddi4+0x6c>
 8001196:	19ed      	adds	r5, r5, r7
 8001198:	f108 32ff 	add.w	r2, r8, #4294967295
 800119c:	f080 8123 	bcs.w	80013e6 <__udivmoddi4+0x2a6>
 80011a0:	42ab      	cmp	r3, r5
 80011a2:	f240 8120 	bls.w	80013e6 <__udivmoddi4+0x2a6>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	443d      	add	r5, r7
 80011ac:	1aed      	subs	r5, r5, r3
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80011b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80011b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011bc:	fb00 f909 	mul.w	r9, r0, r9
 80011c0:	45a1      	cmp	r9, r4
 80011c2:	d909      	bls.n	80011d8 <__udivmoddi4+0x98>
 80011c4:	19e4      	adds	r4, r4, r7
 80011c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80011ca:	f080 810a 	bcs.w	80013e2 <__udivmoddi4+0x2a2>
 80011ce:	45a1      	cmp	r9, r4
 80011d0:	f240 8107 	bls.w	80013e2 <__udivmoddi4+0x2a2>
 80011d4:	3802      	subs	r0, #2
 80011d6:	443c      	add	r4, r7
 80011d8:	eba4 0409 	sub.w	r4, r4, r9
 80011dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011e0:	2100      	movs	r1, #0
 80011e2:	2e00      	cmp	r6, #0
 80011e4:	d061      	beq.n	80012aa <__udivmoddi4+0x16a>
 80011e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80011ea:	2300      	movs	r3, #0
 80011ec:	6034      	str	r4, [r6, #0]
 80011ee:	6073      	str	r3, [r6, #4]
 80011f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d907      	bls.n	8001208 <__udivmoddi4+0xc8>
 80011f8:	2e00      	cmp	r6, #0
 80011fa:	d054      	beq.n	80012a6 <__udivmoddi4+0x166>
 80011fc:	2100      	movs	r1, #0
 80011fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8001202:	4608      	mov	r0, r1
 8001204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001208:	fab3 f183 	clz	r1, r3
 800120c:	2900      	cmp	r1, #0
 800120e:	f040 808e 	bne.w	800132e <__udivmoddi4+0x1ee>
 8001212:	42ab      	cmp	r3, r5
 8001214:	d302      	bcc.n	800121c <__udivmoddi4+0xdc>
 8001216:	4282      	cmp	r2, r0
 8001218:	f200 80fa 	bhi.w	8001410 <__udivmoddi4+0x2d0>
 800121c:	1a84      	subs	r4, r0, r2
 800121e:	eb65 0503 	sbc.w	r5, r5, r3
 8001222:	2001      	movs	r0, #1
 8001224:	46ac      	mov	ip, r5
 8001226:	2e00      	cmp	r6, #0
 8001228:	d03f      	beq.n	80012aa <__udivmoddi4+0x16a>
 800122a:	e886 1010 	stmia.w	r6, {r4, ip}
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	b912      	cbnz	r2, 800123a <__udivmoddi4+0xfa>
 8001234:	2701      	movs	r7, #1
 8001236:	fbb7 f7f2 	udiv	r7, r7, r2
 800123a:	fab7 fe87 	clz	lr, r7
 800123e:	f1be 0f00 	cmp.w	lr, #0
 8001242:	d134      	bne.n	80012ae <__udivmoddi4+0x16e>
 8001244:	1beb      	subs	r3, r5, r7
 8001246:	0c3a      	lsrs	r2, r7, #16
 8001248:	fa1f fc87 	uxth.w	ip, r7
 800124c:	2101      	movs	r1, #1
 800124e:	fbb3 f8f2 	udiv	r8, r3, r2
 8001252:	0c25      	lsrs	r5, r4, #16
 8001254:	fb02 3318 	mls	r3, r2, r8, r3
 8001258:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800125c:	fb0c f308 	mul.w	r3, ip, r8
 8001260:	42ab      	cmp	r3, r5
 8001262:	d907      	bls.n	8001274 <__udivmoddi4+0x134>
 8001264:	19ed      	adds	r5, r5, r7
 8001266:	f108 30ff 	add.w	r0, r8, #4294967295
 800126a:	d202      	bcs.n	8001272 <__udivmoddi4+0x132>
 800126c:	42ab      	cmp	r3, r5
 800126e:	f200 80d1 	bhi.w	8001414 <__udivmoddi4+0x2d4>
 8001272:	4680      	mov	r8, r0
 8001274:	1aed      	subs	r5, r5, r3
 8001276:	b2a3      	uxth	r3, r4
 8001278:	fbb5 f0f2 	udiv	r0, r5, r2
 800127c:	fb02 5510 	mls	r5, r2, r0, r5
 8001280:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8001284:	fb0c fc00 	mul.w	ip, ip, r0
 8001288:	45a4      	cmp	ip, r4
 800128a:	d907      	bls.n	800129c <__udivmoddi4+0x15c>
 800128c:	19e4      	adds	r4, r4, r7
 800128e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001292:	d202      	bcs.n	800129a <__udivmoddi4+0x15a>
 8001294:	45a4      	cmp	ip, r4
 8001296:	f200 80b8 	bhi.w	800140a <__udivmoddi4+0x2ca>
 800129a:	4618      	mov	r0, r3
 800129c:	eba4 040c 	sub.w	r4, r4, ip
 80012a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012a4:	e79d      	b.n	80011e2 <__udivmoddi4+0xa2>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4630      	mov	r0, r6
 80012aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ae:	f1ce 0420 	rsb	r4, lr, #32
 80012b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80012b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80012ba:	fa20 f804 	lsr.w	r8, r0, r4
 80012be:	0c3a      	lsrs	r2, r7, #16
 80012c0:	fa25 f404 	lsr.w	r4, r5, r4
 80012c4:	ea48 0803 	orr.w	r8, r8, r3
 80012c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80012cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80012d0:	fb02 4411 	mls	r4, r2, r1, r4
 80012d4:	fa1f fc87 	uxth.w	ip, r7
 80012d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80012dc:	fb01 f30c 	mul.w	r3, r1, ip
 80012e0:	42ab      	cmp	r3, r5
 80012e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80012e6:	d909      	bls.n	80012fc <__udivmoddi4+0x1bc>
 80012e8:	19ed      	adds	r5, r5, r7
 80012ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80012ee:	f080 808a 	bcs.w	8001406 <__udivmoddi4+0x2c6>
 80012f2:	42ab      	cmp	r3, r5
 80012f4:	f240 8087 	bls.w	8001406 <__udivmoddi4+0x2c6>
 80012f8:	3902      	subs	r1, #2
 80012fa:	443d      	add	r5, r7
 80012fc:	1aeb      	subs	r3, r5, r3
 80012fe:	fa1f f588 	uxth.w	r5, r8
 8001302:	fbb3 f0f2 	udiv	r0, r3, r2
 8001306:	fb02 3310 	mls	r3, r2, r0, r3
 800130a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800130e:	fb00 f30c 	mul.w	r3, r0, ip
 8001312:	42ab      	cmp	r3, r5
 8001314:	d907      	bls.n	8001326 <__udivmoddi4+0x1e6>
 8001316:	19ed      	adds	r5, r5, r7
 8001318:	f100 38ff 	add.w	r8, r0, #4294967295
 800131c:	d26f      	bcs.n	80013fe <__udivmoddi4+0x2be>
 800131e:	42ab      	cmp	r3, r5
 8001320:	d96d      	bls.n	80013fe <__udivmoddi4+0x2be>
 8001322:	3802      	subs	r0, #2
 8001324:	443d      	add	r5, r7
 8001326:	1aeb      	subs	r3, r5, r3
 8001328:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800132c:	e78f      	b.n	800124e <__udivmoddi4+0x10e>
 800132e:	f1c1 0720 	rsb	r7, r1, #32
 8001332:	fa22 f807 	lsr.w	r8, r2, r7
 8001336:	408b      	lsls	r3, r1
 8001338:	fa05 f401 	lsl.w	r4, r5, r1
 800133c:	ea48 0303 	orr.w	r3, r8, r3
 8001340:	fa20 fe07 	lsr.w	lr, r0, r7
 8001344:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001348:	40fd      	lsrs	r5, r7
 800134a:	ea4e 0e04 	orr.w	lr, lr, r4
 800134e:	fbb5 f9fc 	udiv	r9, r5, ip
 8001352:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8001356:	fb0c 5519 	mls	r5, ip, r9, r5
 800135a:	fa1f f883 	uxth.w	r8, r3
 800135e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001362:	fb09 f408 	mul.w	r4, r9, r8
 8001366:	42ac      	cmp	r4, r5
 8001368:	fa02 f201 	lsl.w	r2, r2, r1
 800136c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001370:	d908      	bls.n	8001384 <__udivmoddi4+0x244>
 8001372:	18ed      	adds	r5, r5, r3
 8001374:	f109 30ff 	add.w	r0, r9, #4294967295
 8001378:	d243      	bcs.n	8001402 <__udivmoddi4+0x2c2>
 800137a:	42ac      	cmp	r4, r5
 800137c:	d941      	bls.n	8001402 <__udivmoddi4+0x2c2>
 800137e:	f1a9 0902 	sub.w	r9, r9, #2
 8001382:	441d      	add	r5, r3
 8001384:	1b2d      	subs	r5, r5, r4
 8001386:	fa1f fe8e 	uxth.w	lr, lr
 800138a:	fbb5 f0fc 	udiv	r0, r5, ip
 800138e:	fb0c 5510 	mls	r5, ip, r0, r5
 8001392:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8001396:	fb00 f808 	mul.w	r8, r0, r8
 800139a:	45a0      	cmp	r8, r4
 800139c:	d907      	bls.n	80013ae <__udivmoddi4+0x26e>
 800139e:	18e4      	adds	r4, r4, r3
 80013a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80013a4:	d229      	bcs.n	80013fa <__udivmoddi4+0x2ba>
 80013a6:	45a0      	cmp	r8, r4
 80013a8:	d927      	bls.n	80013fa <__udivmoddi4+0x2ba>
 80013aa:	3802      	subs	r0, #2
 80013ac:	441c      	add	r4, r3
 80013ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013b2:	eba4 0408 	sub.w	r4, r4, r8
 80013b6:	fba0 8902 	umull	r8, r9, r0, r2
 80013ba:	454c      	cmp	r4, r9
 80013bc:	46c6      	mov	lr, r8
 80013be:	464d      	mov	r5, r9
 80013c0:	d315      	bcc.n	80013ee <__udivmoddi4+0x2ae>
 80013c2:	d012      	beq.n	80013ea <__udivmoddi4+0x2aa>
 80013c4:	b156      	cbz	r6, 80013dc <__udivmoddi4+0x29c>
 80013c6:	ebba 030e 	subs.w	r3, sl, lr
 80013ca:	eb64 0405 	sbc.w	r4, r4, r5
 80013ce:	fa04 f707 	lsl.w	r7, r4, r7
 80013d2:	40cb      	lsrs	r3, r1
 80013d4:	431f      	orrs	r7, r3
 80013d6:	40cc      	lsrs	r4, r1
 80013d8:	6037      	str	r7, [r6, #0]
 80013da:	6074      	str	r4, [r6, #4]
 80013dc:	2100      	movs	r1, #0
 80013de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e2:	4618      	mov	r0, r3
 80013e4:	e6f8      	b.n	80011d8 <__udivmoddi4+0x98>
 80013e6:	4690      	mov	r8, r2
 80013e8:	e6e0      	b.n	80011ac <__udivmoddi4+0x6c>
 80013ea:	45c2      	cmp	sl, r8
 80013ec:	d2ea      	bcs.n	80013c4 <__udivmoddi4+0x284>
 80013ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80013f2:	eb69 0503 	sbc.w	r5, r9, r3
 80013f6:	3801      	subs	r0, #1
 80013f8:	e7e4      	b.n	80013c4 <__udivmoddi4+0x284>
 80013fa:	4628      	mov	r0, r5
 80013fc:	e7d7      	b.n	80013ae <__udivmoddi4+0x26e>
 80013fe:	4640      	mov	r0, r8
 8001400:	e791      	b.n	8001326 <__udivmoddi4+0x1e6>
 8001402:	4681      	mov	r9, r0
 8001404:	e7be      	b.n	8001384 <__udivmoddi4+0x244>
 8001406:	4601      	mov	r1, r0
 8001408:	e778      	b.n	80012fc <__udivmoddi4+0x1bc>
 800140a:	3802      	subs	r0, #2
 800140c:	443c      	add	r4, r7
 800140e:	e745      	b.n	800129c <__udivmoddi4+0x15c>
 8001410:	4608      	mov	r0, r1
 8001412:	e708      	b.n	8001226 <__udivmoddi4+0xe6>
 8001414:	f1a8 0802 	sub.w	r8, r8, #2
 8001418:	443d      	add	r5, r7
 800141a:	e72b      	b.n	8001274 <__udivmoddi4+0x134>

0800141c <__aeabi_idiv0>:
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <duty_generator>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
volatile uint16_t delay = 0;
void duty_generator(uint16_t v_duty_u16)
{
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t v_ton_u16 = ((v_duty_u16*(410))/100);
 8001422:	f44f 75cd 	mov.w	r5, #410	; 0x19a
 8001426:	4345      	muls	r5, r0
	uint16_t v_toff_u16 = (410-v_ton_u16);

	for(delay=0;delay <= v_ton_u16;delay++)
 8001428:	4c16      	ldr	r4, [pc, #88]	; (8001484 <duty_generator+0x64>)
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);
 800142a:	4f17      	ldr	r7, [pc, #92]	; (8001488 <duty_generator+0x68>)
	uint16_t v_ton_u16 = ((v_duty_u16*(410))/100);
 800142c:	2064      	movs	r0, #100	; 0x64
 800142e:	fb95 f5f0 	sdiv	r5, r5, r0
 8001432:	b2ad      	uxth	r5, r5
	uint16_t v_toff_u16 = (410-v_ton_u16);
 8001434:	f5c5 76cd 	rsb	r6, r5, #410	; 0x19a
	for(delay=0;delay <= v_ton_u16;delay++)
 8001438:	2300      	movs	r3, #0
	uint16_t v_toff_u16 = (410-v_ton_u16);
 800143a:	b2b6      	uxth	r6, r6
	for(delay=0;delay <= v_ton_u16;delay++)
 800143c:	8023      	strh	r3, [r4, #0]
 800143e:	8823      	ldrh	r3, [r4, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	429d      	cmp	r5, r3
 8001444:	d207      	bcs.n	8001456 <duty_generator+0x36>

	for(delay=0;delay <= v_toff_u16;delay++)
 8001446:	2300      	movs	r3, #0
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
 8001448:	4d0f      	ldr	r5, [pc, #60]	; (8001488 <duty_generator+0x68>)
	for(delay=0;delay <= v_toff_u16;delay++)
 800144a:	8023      	strh	r3, [r4, #0]
 800144c:	8823      	ldrh	r3, [r4, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	429e      	cmp	r6, r3
 8001452:	d20b      	bcs.n	800146c <duty_generator+0x4c>
}
 8001454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145c:	4638      	mov	r0, r7
 800145e:	f7ff fa53 	bl	8000908 <HAL_GPIO_WritePin>
	for(delay=0;delay <= v_ton_u16;delay++)
 8001462:	8823      	ldrh	r3, [r4, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	8023      	strh	r3, [r4, #0]
 800146a:	e7e8      	b.n	800143e <duty_generator+0x1e>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001472:	4628      	mov	r0, r5
 8001474:	f7ff fa48 	bl	8000908 <HAL_GPIO_WritePin>
	for(delay=0;delay <= v_toff_u16;delay++)
 8001478:	8823      	ldrh	r3, [r4, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b29b      	uxth	r3, r3
 800147e:	8023      	strh	r3, [r4, #0]
 8001480:	e7e4      	b.n	800144c <duty_generator+0x2c>
 8001482:	bf00      	nop
 8001484:	20000020 	.word	0x20000020
 8001488:	40020c00 	.word	0x40020c00

0800148c <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800148c:	b530      	push	{r4, r5, lr}
 800148e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <SystemClock_Config+0xa4>)
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001498:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800149c:	6411      	str	r1, [r2, #64]	; 0x40
 800149e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014a0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <SystemClock_Config+0xa8>)
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	6811      	ldr	r1, [r2, #0]
 80014ae:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80014b2:	6011      	str	r1, [r2, #0]
 80014b4:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b6:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014bc:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014be:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014c2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 410;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014c8:	2504      	movs	r5, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ca:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 410;
 80014cc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014d0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d4:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014d6:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d8:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 410;
 80014da:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014dc:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014de:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f7ff fa3e 	bl	8000960 <HAL_RCC_OscConfig>
 80014e4:	b100      	cbz	r0, 80014e8 <SystemClock_Config+0x5c>
 80014e6:	e7fe      	b.n	80014e6 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f6:	4621      	mov	r1, r4
 80014f8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fc:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fe:	f7ff fc2b 	bl	8000d58 <HAL_RCC_ClockConfig>
 8001502:	4604      	mov	r4, r0
 8001504:	b100      	cbz	r0, 8001508 <SystemClock_Config+0x7c>
 8001506:	e7fe      	b.n	8001506 <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001508:	f7ff fcc0 	bl	8000e8c <HAL_RCC_GetHCLKFreq>
 800150c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001510:	fbb0 f0f3 	udiv	r0, r0, r3
 8001514:	f7fe ff9c 	bl	8000450 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001518:	4628      	mov	r0, r5
 800151a:	f7ff f865 	bl	80005e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800151e:	4622      	mov	r2, r4
 8001520:	4621      	mov	r1, r4
 8001522:	f04f 30ff 	mov.w	r0, #4294967295
 8001526:	f7fe ff33 	bl	8000390 <HAL_NVIC_SetPriority>
}
 800152a:	b015      	add	sp, #84	; 0x54
 800152c:	bd30      	pop	{r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <main>:
{
 8001538:	b500      	push	{lr}
 800153a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800153c:	f7fe fe70 	bl	8000220 <HAL_Init>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001540:	2400      	movs	r4, #0
  SystemClock_Config();
 8001542:	f7ff ffa3 	bl	800148c <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <main+0x64>)
 8001548:	9401      	str	r4, [sp, #4]
 800154a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800154c:	4814      	ldr	r0, [pc, #80]	; (80015a0 <main+0x68>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
 8001554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001556:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	9402      	str	r4, [sp, #8]
 8001560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001562:	f042 0208 	orr.w	r2, r2, #8
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001574:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001578:	f7ff f9c6 	bl	8000908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001582:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <main+0x68>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158e:	f7ff f83d 	bl	800060c <HAL_GPIO_Init>
	  duty_generator(10);
 8001592:	200a      	movs	r0, #10
 8001594:	f7ff ff44 	bl	8001420 <duty_generator>
 8001598:	e7fb      	b.n	8001592 <main+0x5a>
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015aa:	e003      	b.n	80015b4 <LoopCopyDataInit>

080015ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015b2:	3104      	adds	r1, #4

080015b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	; (80015e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015bc:	d3f6      	bcc.n	80015ac <CopyDataInit>
  ldr  r2, =_sbss
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015c0:	e002      	b.n	80015c8 <LoopFillZerobss>

080015c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015c4:	f842 3b04 	str.w	r3, [r2], #4

080015c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015cc:	d3f9      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ce:	f7ff fd3f 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f000 f811 	bl	80015f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7ff ffaf 	bl	8001538 <main>
  bx  lr    
 80015da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015e0:	08001680 	.word	0x08001680
  ldr  r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80015ec:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80015f0:	20000028 	.word	0x20000028

080015f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC_IRQHandler>
	...

080015f8 <__libc_init_array>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4e0d      	ldr	r6, [pc, #52]	; (8001630 <__libc_init_array+0x38>)
 80015fc:	4c0d      	ldr	r4, [pc, #52]	; (8001634 <__libc_init_array+0x3c>)
 80015fe:	1ba4      	subs	r4, r4, r6
 8001600:	10a4      	asrs	r4, r4, #2
 8001602:	2500      	movs	r5, #0
 8001604:	42a5      	cmp	r5, r4
 8001606:	d109      	bne.n	800161c <__libc_init_array+0x24>
 8001608:	4e0b      	ldr	r6, [pc, #44]	; (8001638 <__libc_init_array+0x40>)
 800160a:	4c0c      	ldr	r4, [pc, #48]	; (800163c <__libc_init_array+0x44>)
 800160c:	f000 f818 	bl	8001640 <_init>
 8001610:	1ba4      	subs	r4, r4, r6
 8001612:	10a4      	asrs	r4, r4, #2
 8001614:	2500      	movs	r5, #0
 8001616:	42a5      	cmp	r5, r4
 8001618:	d105      	bne.n	8001626 <__libc_init_array+0x2e>
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001620:	4798      	blx	r3
 8001622:	3501      	adds	r5, #1
 8001624:	e7ee      	b.n	8001604 <__libc_init_array+0xc>
 8001626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800162a:	4798      	blx	r3
 800162c:	3501      	adds	r5, #1
 800162e:	e7f2      	b.n	8001616 <__libc_init_array+0x1e>
 8001630:	08001678 	.word	0x08001678
 8001634:	08001678 	.word	0x08001678
 8001638:	08001678 	.word	0x08001678
 800163c:	0800167c 	.word	0x0800167c

08001640 <_init>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr

0800164c <_fini>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr
