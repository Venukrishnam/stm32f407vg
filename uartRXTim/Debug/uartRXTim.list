
uartRXTim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000190c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001a94  08001a94  00011a94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001aac  08001aac  00011aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ab4  08001ab4  00011ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ab8  08001ab8  00011ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          000000bc  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000c0  200000c0  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   000110a8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ffd  00000000  00000000  000310dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005a86  00000000  00000000  000330d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  00038b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004556  00000000  00000000  00039dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003638  00000000  00000000  0003e31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00041956  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000017e8  00000000  00000000  000419d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a7c 	.word	0x08001a7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001a7c 	.word	0x08001a7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f884 	bl	80005f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f83e 	bl	8000574 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_Init>:
{
 8000500:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f817 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffd8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000528:	f001 f968 	bl	80017fc <HAL_MspInit>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000024 	.word	0x20000024

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000024 	.word	0x20000024

08000550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000554:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000560:	0200      	lsls	r0, r0, #8
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800056c:	60d3      	str	r3, [r2, #12]
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	68dc      	ldr	r4, [r3, #12]
 800057a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000584:	2b04      	cmp	r3, #4
 8000586:	bf28      	it	cs
 8000588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 0501 	mov.w	r5, #1
 8000590:	fa05 f303 	lsl.w	r3, r5, r3
 8000594:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	bf8c      	ite	hi
 800059a:	3c03      	subhi	r4, #3
 800059c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059e:	4019      	ands	r1, r3
 80005a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a2:	fa05 f404 	lsl.w	r4, r5, r4
 80005a6:	3c01      	subs	r4, #1
 80005a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	ea42 0201 	orr.w	r2, r2, r1
 80005b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	bfaf      	iteee	ge
 80005b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	f000 000f 	andlt.w	r0, r0, #15
 80005be:	4b06      	ldrlt	r3, [pc, #24]	; (80005d8 <HAL_NVIC_SetPriority+0x64>)
 80005c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfa5      	ittet	ge
 80005c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ed14 	.word	0xe000ed14

080005dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005dc:	0942      	lsrs	r2, r0, #5
 80005de:	2301      	movs	r3, #1
 80005e0:	f000 001f 	and.w	r0, r0, #31
 80005e4:	fa03 f000 	lsl.w	r0, r3, r0
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_NVIC_EnableIRQ+0x14>)
 80005ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20a      	bcs.n	8000612 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000600:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	21f0      	movs	r1, #240	; 0xf0
 8000604:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000608:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000e010 	.word	0xe000e010
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000622:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000624:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000626:	bf0c      	ite	eq
 8000628:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800062c:	f022 0204 	bicne.w	r2, r2, #4
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4770      	bx	lr
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000638:	4770      	bx	lr

0800063a <HAL_SYSTICK_IRQHandler>:
{
 800063a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800063c:	f7ff fffc 	bl	8000638 <HAL_SYSTICK_Callback>
 8000640:	bd08      	pop	{r3, pc}
	...

08000644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000648:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80007fc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000650:	4a68      	ldr	r2, [pc, #416]	; (80007f4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000652:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000800 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000656:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000658:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800065a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000660:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000664:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000668:	45b6      	cmp	lr, r6
 800066a:	f040 80ae 	bne.w	80007ca <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800066e:	684c      	ldr	r4, [r1, #4]
 8000670:	f024 0710 	bic.w	r7, r4, #16
 8000674:	2f02      	cmp	r7, #2
 8000676:	d116      	bne.n	80006a6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000678:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800067c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000680:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000684:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000688:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800068c:	f04f 0c0f 	mov.w	ip, #15
 8000690:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000694:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000698:	690d      	ldr	r5, [r1, #16]
 800069a:	fa05 f50b 	lsl.w	r5, r5, fp
 800069e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006a2:	f8ca 5020 	str.w	r5, [sl, #32]
 80006a6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006aa:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006ac:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b0:	fa05 f50a 	lsl.w	r5, r5, sl
 80006b4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006b6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ba:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006be:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ca:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ce:	d811      	bhi.n	80006f4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006d0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006d6:	68cf      	ldr	r7, [r1, #12]
 80006d8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006dc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006e0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006e4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006e8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006ec:	409f      	lsls	r7, r3
 80006ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006f2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006f4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f8:	688f      	ldr	r7, [r1, #8]
 80006fa:	fa07 f70a 	lsl.w	r7, r7, sl
 80006fe:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000700:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000702:	00e5      	lsls	r5, r4, #3
 8000704:	d561      	bpl.n	80007ca <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	f04f 0b00 	mov.w	fp, #0
 800070a:	f8cd b00c 	str.w	fp, [sp, #12]
 800070e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000712:	4d39      	ldr	r5, [pc, #228]	; (80007f8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000714:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000718:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800071c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000720:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000724:	9703      	str	r7, [sp, #12]
 8000726:	9f03      	ldr	r7, [sp, #12]
 8000728:	f023 0703 	bic.w	r7, r3, #3
 800072c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000730:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000734:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000738:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800073c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000740:	f04f 0e0f 	mov.w	lr, #15
 8000744:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000748:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800074a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074e:	d043      	beq.n	80007d8 <HAL_GPIO_Init+0x194>
 8000750:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000754:	42a8      	cmp	r0, r5
 8000756:	d041      	beq.n	80007dc <HAL_GPIO_Init+0x198>
 8000758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075c:	42a8      	cmp	r0, r5
 800075e:	d03f      	beq.n	80007e0 <HAL_GPIO_Init+0x19c>
 8000760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000764:	42a8      	cmp	r0, r5
 8000766:	d03d      	beq.n	80007e4 <HAL_GPIO_Init+0x1a0>
 8000768:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800076c:	42a8      	cmp	r0, r5
 800076e:	d03b      	beq.n	80007e8 <HAL_GPIO_Init+0x1a4>
 8000770:	4548      	cmp	r0, r9
 8000772:	d03b      	beq.n	80007ec <HAL_GPIO_Init+0x1a8>
 8000774:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000778:	42a8      	cmp	r0, r5
 800077a:	d039      	beq.n	80007f0 <HAL_GPIO_Init+0x1ac>
 800077c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000780:	42a8      	cmp	r0, r5
 8000782:	bf14      	ite	ne
 8000784:	2508      	movne	r5, #8
 8000786:	2507      	moveq	r5, #7
 8000788:	fa05 f50c 	lsl.w	r5, r5, ip
 800078c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000790:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000792:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000794:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000796:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800079a:	bf0c      	ite	eq
 800079c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800079e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007a0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007a2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007a8:	bf0c      	ite	eq
 80007aa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ac:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007ae:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007b6:	bf0c      	ite	eq
 80007b8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ba:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007bc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007be:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007c2:	bf54      	ite	pl
 80007c4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007c6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007c8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ca:	3301      	adds	r3, #1
 80007cc:	2b10      	cmp	r3, #16
 80007ce:	f47f af44 	bne.w	800065a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007d2:	b005      	add	sp, #20
 80007d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d8:	465d      	mov	r5, fp
 80007da:	e7d5      	b.n	8000788 <HAL_GPIO_Init+0x144>
 80007dc:	2501      	movs	r5, #1
 80007de:	e7d3      	b.n	8000788 <HAL_GPIO_Init+0x144>
 80007e0:	2502      	movs	r5, #2
 80007e2:	e7d1      	b.n	8000788 <HAL_GPIO_Init+0x144>
 80007e4:	2503      	movs	r5, #3
 80007e6:	e7cf      	b.n	8000788 <HAL_GPIO_Init+0x144>
 80007e8:	2504      	movs	r5, #4
 80007ea:	e7cd      	b.n	8000788 <HAL_GPIO_Init+0x144>
 80007ec:	2505      	movs	r5, #5
 80007ee:	e7cb      	b.n	8000788 <HAL_GPIO_Init+0x144>
 80007f0:	2506      	movs	r5, #6
 80007f2:	e7c9      	b.n	8000788 <HAL_GPIO_Init+0x144>
 80007f4:	40013c00 	.word	0x40013c00
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40023800 	.word	0x40023800
 8000800:	40021400 	.word	0x40021400

08000804 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000804:	b10a      	cbz	r2, 800080a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000806:	6181      	str	r1, [r0, #24]
 8000808:	4770      	bx	lr
 800080a:	0409      	lsls	r1, r1, #16
 800080c:	e7fb      	b.n	8000806 <HAL_GPIO_WritePin+0x2>
	...

08000810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000812:	4604      	mov	r4, r0
 8000814:	b910      	cbnz	r0, 800081c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000816:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000818:	b003      	add	sp, #12
 800081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	07d8      	lsls	r0, r3, #31
 8000820:	d43b      	bmi.n	800089a <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	0799      	lsls	r1, r3, #30
 8000826:	f100 8084 	bmi.w	8000932 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	071e      	lsls	r6, r3, #28
 800082e:	f100 80c6 	bmi.w	80009be <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	075d      	lsls	r5, r3, #29
 8000836:	d52a      	bpl.n	800088e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	4baa      	ldr	r3, [pc, #680]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800083e:	4dab      	ldr	r5, [pc, #684]	; (8000aec <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000846:	641a      	str	r2, [r3, #64]	; 0x40
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000852:	682b      	ldr	r3, [r5, #0]
 8000854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000858:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800085a:	f7ff fe73 	bl	8000544 <HAL_GetTick>
 800085e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000860:	682b      	ldr	r3, [r5, #0]
 8000862:	05da      	lsls	r2, r3, #23
 8000864:	f140 80cd 	bpl.w	8000a02 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000868:	68a3      	ldr	r3, [r4, #8]
 800086a:	4d9f      	ldr	r5, [pc, #636]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
 800086c:	2b01      	cmp	r3, #1
 800086e:	f040 80cf 	bne.w	8000a10 <HAL_RCC_OscConfig+0x200>
 8000872:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800087a:	f7ff fe63 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800087e:	4d9a      	ldr	r5, [pc, #616]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000880:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000882:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000886:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000888:	079b      	lsls	r3, r3, #30
 800088a:	f140 80e2 	bpl.w	8000a52 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800088e:	69a2      	ldr	r2, [r4, #24]
 8000890:	2a00      	cmp	r2, #0
 8000892:	f040 80e5 	bne.w	8000a60 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8000896:	2000      	movs	r0, #0
 8000898:	e7be      	b.n	8000818 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800089a:	4b93      	ldr	r3, [pc, #588]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	f002 020c 	and.w	r2, r2, #12
 80008a2:	2a04      	cmp	r2, #4
 80008a4:	d007      	beq.n	80008b6 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ac:	2a08      	cmp	r2, #8
 80008ae:	d10a      	bne.n	80008c6 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	025a      	lsls	r2, r3, #9
 80008b4:	d507      	bpl.n	80008c6 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b6:	4b8c      	ldr	r3, [pc, #560]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	039b      	lsls	r3, r3, #14
 80008bc:	d5b1      	bpl.n	8000822 <HAL_RCC_OscConfig+0x12>
 80008be:	6863      	ldr	r3, [r4, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1ae      	bne.n	8000822 <HAL_RCC_OscConfig+0x12>
 80008c4:	e7a7      	b.n	8000816 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	4d87      	ldr	r5, [pc, #540]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
 80008ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ce:	d111      	bne.n	80008f4 <HAL_RCC_OscConfig+0xe4>
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008d8:	f7ff fe34 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008dc:	4d82      	ldr	r5, [pc, #520]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80008de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	039f      	lsls	r7, r3, #14
 80008e4:	d49d      	bmi.n	8000822 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008e6:	f7ff fe2d 	bl	8000544 <HAL_GetTick>
 80008ea:	1b80      	subs	r0, r0, r6
 80008ec:	2864      	cmp	r0, #100	; 0x64
 80008ee:	d9f7      	bls.n	80008e0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80008f0:	2003      	movs	r0, #3
 80008f2:	e791      	b.n	8000818 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008f8:	d104      	bne.n	8000904 <HAL_RCC_OscConfig+0xf4>
 80008fa:	682b      	ldr	r3, [r5, #0]
 80008fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000900:	602b      	str	r3, [r5, #0]
 8000902:	e7e5      	b.n	80008d0 <HAL_RCC_OscConfig+0xc0>
 8000904:	682a      	ldr	r2, [r5, #0]
 8000906:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800090a:	602a      	str	r2, [r5, #0]
 800090c:	682a      	ldr	r2, [r5, #0]
 800090e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000912:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1df      	bne.n	80008d8 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8000918:	f7ff fe14 	bl	8000544 <HAL_GetTick>
 800091c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	0398      	lsls	r0, r3, #14
 8000922:	f57f af7e 	bpl.w	8000822 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000926:	f7ff fe0d 	bl	8000544 <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	2864      	cmp	r0, #100	; 0x64
 800092e:	d9f6      	bls.n	800091e <HAL_RCC_OscConfig+0x10e>
 8000930:	e7de      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000932:	4b6d      	ldr	r3, [pc, #436]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	f012 0f0c 	tst.w	r2, #12
 800093a:	d007      	beq.n	800094c <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000942:	2a08      	cmp	r2, #8
 8000944:	d112      	bne.n	800096c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	0259      	lsls	r1, r3, #9
 800094a:	d40f      	bmi.n	800096c <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094c:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	0792      	lsls	r2, r2, #30
 8000952:	d503      	bpl.n	800095c <HAL_RCC_OscConfig+0x14c>
 8000954:	68e2      	ldr	r2, [r4, #12]
 8000956:	2a01      	cmp	r2, #1
 8000958:	f47f af5d 	bne.w	8000816 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	6921      	ldr	r1, [r4, #16]
 8000960:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000964:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000968:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096a:	e75e      	b.n	800082a <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800096c:	68e2      	ldr	r2, [r4, #12]
 800096e:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <HAL_RCC_OscConfig+0x2e0>)
 8000970:	b1b2      	cbz	r2, 80009a0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000976:	f7ff fde5 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800097a:	4d5b      	ldr	r5, [pc, #364]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800097c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	079b      	lsls	r3, r3, #30
 8000982:	d507      	bpl.n	8000994 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	6922      	ldr	r2, [r4, #16]
 8000988:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800098c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000990:	602b      	str	r3, [r5, #0]
 8000992:	e74a      	b.n	800082a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000994:	f7ff fdd6 	bl	8000544 <HAL_GetTick>
 8000998:	1b80      	subs	r0, r0, r6
 800099a:	2802      	cmp	r0, #2
 800099c:	d9ef      	bls.n	800097e <HAL_RCC_OscConfig+0x16e>
 800099e:	e7a7      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80009a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009a2:	f7ff fdcf 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a6:	4d50      	ldr	r5, [pc, #320]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009aa:	682b      	ldr	r3, [r5, #0]
 80009ac:	079f      	lsls	r7, r3, #30
 80009ae:	f57f af3c 	bpl.w	800082a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b2:	f7ff fdc7 	bl	8000544 <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9f6      	bls.n	80009aa <HAL_RCC_OscConfig+0x19a>
 80009bc:	e798      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009be:	6962      	ldr	r2, [r4, #20]
 80009c0:	4b4c      	ldr	r3, [pc, #304]	; (8000af4 <HAL_RCC_OscConfig+0x2e4>)
 80009c2:	b17a      	cbz	r2, 80009e4 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009c8:	f7ff fdbc 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009cc:	4d46      	ldr	r5, [pc, #280]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009d2:	0798      	lsls	r0, r3, #30
 80009d4:	f53f af2d 	bmi.w	8000832 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d8:	f7ff fdb4 	bl	8000544 <HAL_GetTick>
 80009dc:	1b80      	subs	r0, r0, r6
 80009de:	2802      	cmp	r0, #2
 80009e0:	d9f6      	bls.n	80009d0 <HAL_RCC_OscConfig+0x1c0>
 80009e2:	e785      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80009e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e6:	f7ff fdad 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ea:	4d3f      	ldr	r5, [pc, #252]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f0:	0799      	lsls	r1, r3, #30
 80009f2:	f57f af1e 	bpl.w	8000832 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f6:	f7ff fda5 	bl	8000544 <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d9f6      	bls.n	80009ee <HAL_RCC_OscConfig+0x1de>
 8000a00:	e776      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a02:	f7ff fd9f 	bl	8000544 <HAL_GetTick>
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	f67f af29 	bls.w	8000860 <HAL_RCC_OscConfig+0x50>
 8000a0e:	e76f      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	d104      	bne.n	8000a1e <HAL_RCC_OscConfig+0x20e>
 8000a14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a1c:	e729      	b.n	8000872 <HAL_RCC_OscConfig+0x62>
 8000a1e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	672a      	str	r2, [r5, #112]	; 0x70
 8000a26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a28:	f022 0204 	bic.w	r2, r2, #4
 8000a2c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f47f af23 	bne.w	800087a <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000a34:	f7ff fd86 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a38:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a40:	0798      	lsls	r0, r3, #30
 8000a42:	f57f af24 	bpl.w	800088e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a46:	f7ff fd7d 	bl	8000544 <HAL_GetTick>
 8000a4a:	1b80      	subs	r0, r0, r6
 8000a4c:	42b8      	cmp	r0, r7
 8000a4e:	d9f6      	bls.n	8000a3e <HAL_RCC_OscConfig+0x22e>
 8000a50:	e74e      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a52:	f7ff fd77 	bl	8000544 <HAL_GetTick>
 8000a56:	1b80      	subs	r0, r0, r6
 8000a58:	42b8      	cmp	r0, r7
 8000a5a:	f67f af14 	bls.w	8000886 <HAL_RCC_OscConfig+0x76>
 8000a5e:	e747      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a60:	4d21      	ldr	r5, [pc, #132]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
 8000a62:	68ab      	ldr	r3, [r5, #8]
 8000a64:	f003 030c 	and.w	r3, r3, #12
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	f43f aed4 	beq.w	8000816 <HAL_RCC_OscConfig+0x6>
 8000a6e:	4e22      	ldr	r6, [pc, #136]	; (8000af8 <HAL_RCC_OscConfig+0x2e8>)
 8000a70:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a72:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a74:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a76:	d12a      	bne.n	8000ace <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000a78:	f7ff fd64 	bl	8000544 <HAL_GetTick>
 8000a7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	0199      	lsls	r1, r3, #6
 8000a82:	d41e      	bmi.n	8000ac2 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a84:	6a22      	ldr	r2, [r4, #32]
 8000a86:	69e3      	ldr	r3, [r4, #28]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a8c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a98:	4c13      	ldr	r4, [pc, #76]	; (8000ae8 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a9a:	0852      	lsrs	r2, r2, #1
 8000a9c:	3a01      	subs	r2, #1
 8000a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000aa8:	f7ff fd4c 	bl	8000544 <HAL_GetTick>
 8000aac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	019a      	lsls	r2, r3, #6
 8000ab2:	f53f aef0 	bmi.w	8000896 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ab6:	f7ff fd45 	bl	8000544 <HAL_GetTick>
 8000aba:	1b40      	subs	r0, r0, r5
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d9f6      	bls.n	8000aae <HAL_RCC_OscConfig+0x29e>
 8000ac0:	e716      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac2:	f7ff fd3f 	bl	8000544 <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	2802      	cmp	r0, #2
 8000aca:	d9d8      	bls.n	8000a7e <HAL_RCC_OscConfig+0x26e>
 8000acc:	e710      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000ace:	f7ff fd39 	bl	8000544 <HAL_GetTick>
 8000ad2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	019b      	lsls	r3, r3, #6
 8000ad8:	f57f aedd 	bpl.w	8000896 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000adc:	f7ff fd32 	bl	8000544 <HAL_GetTick>
 8000ae0:	1b00      	subs	r0, r0, r4
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9f6      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x2c4>
 8000ae6:	e703      	b.n	80008f0 <HAL_RCC_OscConfig+0xe0>
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000
 8000af0:	42470000 	.word	0x42470000
 8000af4:	42470e80 	.word	0x42470e80
 8000af8:	42470060 	.word	0x42470060

08000afc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000afc:	4913      	ldr	r1, [pc, #76]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000afe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b00:	688b      	ldr	r3, [r1, #8]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d003      	beq.n	8000b12 <HAL_RCC_GetSysClockFreq+0x16>
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d003      	beq.n	8000b16 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b0e:	4810      	ldr	r0, [pc, #64]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b10:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b14:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b18:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b1a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b1c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b20:	bf14      	ite	ne
 8000b22:	480c      	ldrne	r0, [pc, #48]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b24:	480a      	ldreq	r0, [pc, #40]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b26:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b2a:	bf18      	it	ne
 8000b2c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b32:	fba1 0100 	umull	r0, r1, r1, r0
 8000b36:	f7ff fb47 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x50>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b42:	3301      	adds	r3, #1
 8000b44:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b46:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b4a:	bd08      	pop	{r3, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	00f42400 	.word	0x00f42400
 8000b54:	017d7840 	.word	0x017d7840

08000b58 <HAL_RCC_ClockConfig>:
{
 8000b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b5c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b5e:	4604      	mov	r4, r0
 8000b60:	b910      	cbnz	r0, 8000b68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
 8000b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b68:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <HAL_RCC_ClockConfig+0x124>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	f002 020f 	and.w	r2, r2, #15
 8000b70:	428a      	cmp	r2, r1
 8000b72:	d328      	bcc.n	8000bc6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b74:	6821      	ldr	r1, [r4, #0]
 8000b76:	078f      	lsls	r7, r1, #30
 8000b78:	d42d      	bmi.n	8000bd6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b7a:	07c8      	lsls	r0, r1, #31
 8000b7c:	d440      	bmi.n	8000c00 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <HAL_RCC_ClockConfig+0x124>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f002 020f 	and.w	r2, r2, #15
 8000b86:	4295      	cmp	r5, r2
 8000b88:	d366      	bcc.n	8000c58 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b8a:	6822      	ldr	r2, [r4, #0]
 8000b8c:	0751      	lsls	r1, r2, #29
 8000b8e:	d46c      	bmi.n	8000c6a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b90:	0713      	lsls	r3, r2, #28
 8000b92:	d507      	bpl.n	8000ba4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b94:	4a3a      	ldr	r2, [pc, #232]	; (8000c80 <HAL_RCC_ClockConfig+0x128>)
 8000b96:	6921      	ldr	r1, [r4, #16]
 8000b98:	6893      	ldr	r3, [r2, #8]
 8000b9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ba2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ba4:	f7ff ffaa 	bl	8000afc <HAL_RCC_GetSysClockFreq>
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <HAL_RCC_ClockConfig+0x128>)
 8000baa:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <HAL_RCC_ClockConfig+0x12c>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	40d8      	lsrs	r0, r3
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <HAL_RCC_ClockConfig+0x130>)
 8000bb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff fc8c 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc6:	b2ca      	uxtb	r2, r1
 8000bc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 030f 	and.w	r3, r3, #15
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d1c6      	bne.n	8000b62 <HAL_RCC_ClockConfig+0xa>
 8000bd4:	e7ce      	b.n	8000b74 <HAL_RCC_ClockConfig+0x1c>
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bdc:	bf1e      	ittt	ne
 8000bde:	689a      	ldrne	r2, [r3, #8]
 8000be0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000be4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000be6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000be8:	bf42      	ittt	mi
 8000bea:	689a      	ldrmi	r2, [r3, #8]
 8000bec:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bf0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	68a0      	ldr	r0, [r4, #8]
 8000bf6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bfa:	4302      	orrs	r2, r0
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	e7bc      	b.n	8000b7a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c00:	6862      	ldr	r2, [r4, #4]
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_RCC_ClockConfig+0x128>)
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d11d      	bne.n	8000c44 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0e:	d0a8      	beq.n	8000b62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c10:	4e1b      	ldr	r6, [pc, #108]	; (8000c80 <HAL_RCC_ClockConfig+0x128>)
 8000c12:	68b3      	ldr	r3, [r6, #8]
 8000c14:	f023 0303 	bic.w	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c1c:	f7ff fc92 	bl	8000544 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c20:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c24:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c26:	68b3      	ldr	r3, [r6, #8]
 8000c28:	6862      	ldr	r2, [r4, #4]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c32:	d0a4      	beq.n	8000b7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c34:	f7ff fc86 	bl	8000544 <HAL_GetTick>
 8000c38:	1bc0      	subs	r0, r0, r7
 8000c3a:	4540      	cmp	r0, r8
 8000c3c:	d9f3      	bls.n	8000c26 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c3e:	2003      	movs	r0, #3
}
 8000c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c44:	1e91      	subs	r1, r2, #2
 8000c46:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c48:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c4a:	d802      	bhi.n	8000c52 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c50:	e7dd      	b.n	8000c0e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c52:	f013 0f02 	tst.w	r3, #2
 8000c56:	e7da      	b.n	8000c0e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c58:	b2ea      	uxtb	r2, r5
 8000c5a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	429d      	cmp	r5, r3
 8000c64:	f47f af7d 	bne.w	8000b62 <HAL_RCC_ClockConfig+0xa>
 8000c68:	e78f      	b.n	8000b8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c6a:	4905      	ldr	r1, [pc, #20]	; (8000c80 <HAL_RCC_ClockConfig+0x128>)
 8000c6c:	68e0      	ldr	r0, [r4, #12]
 8000c6e:	688b      	ldr	r3, [r1, #8]
 8000c70:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c74:	4303      	orrs	r3, r0
 8000c76:	608b      	str	r3, [r1, #8]
 8000c78:	e78a      	b.n	8000b90 <HAL_RCC_ClockConfig+0x38>
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00
 8000c80:	40023800 	.word	0x40023800
 8000c84:	08001a94 	.word	0x08001a94
 8000c88:	20000000 	.word	0x20000000

08000c8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c8c:	4b01      	ldr	r3, [pc, #4]	; (8000c94 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000000 	.word	0x20000000

08000c98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ca6:	6810      	ldr	r0, [r2, #0]
}
 8000ca8:	40d8      	lsrs	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	08001aa4 	.word	0x08001aa4
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000cc2:	5cd3      	ldrb	r3, [r2, r3]
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cc6:	6810      	ldr	r0, [r2, #0]
}
 8000cc8:	40d8      	lsrs	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	08001aa4 	.word	0x08001aa4
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cd8:	6a03      	ldr	r3, [r0, #32]
 8000cda:	f023 0301 	bic.w	r3, r3, #1
 8000cde:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ce0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000ce2:	6842      	ldr	r2, [r0, #4]
{
 8000ce4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000ce6:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ce8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000cea:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000cee:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000cf0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000cf2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000cf6:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000cf8:	4c0c      	ldr	r4, [pc, #48]	; (8000d2c <TIM_OC1_SetConfig+0x54>)
 8000cfa:	42a0      	cmp	r0, r4
 8000cfc:	d009      	beq.n	8000d12 <TIM_OC1_SetConfig+0x3a>
 8000cfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	d005      	beq.n	8000d12 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d06:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000d08:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000d0a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000d0c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000d0e:	6203      	str	r3, [r0, #32]
} 
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000d12:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d14:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000d16:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000d1a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d1c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000d1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d22:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000d24:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d28:	4322      	orrs	r2, r4
 8000d2a:	e7ec      	b.n	8000d06 <TIM_OC1_SetConfig+0x2e>
 8000d2c:	40010000 	.word	0x40010000

08000d30 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d30:	6a03      	ldr	r3, [r0, #32]
 8000d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d36:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d38:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000d3a:	6842      	ldr	r2, [r0, #4]
{
 8000d3c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d3e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000d42:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d46:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d48:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000d4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d4e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000d52:	4c0e      	ldr	r4, [pc, #56]	; (8000d8c <TIM_OC3_SetConfig+0x5c>)
 8000d54:	42a0      	cmp	r0, r4
 8000d56:	d009      	beq.n	8000d6c <TIM_OC3_SetConfig+0x3c>
 8000d58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d5c:	42a0      	cmp	r0, r4
 8000d5e:	d005      	beq.n	8000d6c <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d60:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000d62:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000d64:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000d66:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d68:	6203      	str	r3, [r0, #32]
}
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000d6c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d6e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000d74:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000d78:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000d7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d7e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d84:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000d88:	e7ea      	b.n	8000d60 <TIM_OC3_SetConfig+0x30>
 8000d8a:	bf00      	nop
 8000d8c:	40010000 	.word	0x40010000

08000d90 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000d90:	6a03      	ldr	r3, [r0, #32]
 8000d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d96:	6203      	str	r3, [r0, #32]
{
 8000d98:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d9a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000d9c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d9e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000da0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000da2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000da6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000daa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000dac:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000db0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000db4:	4d09      	ldr	r5, [pc, #36]	; (8000ddc <TIM_OC4_SetConfig+0x4c>)
 8000db6:	42a8      	cmp	r0, r5
 8000db8:	d009      	beq.n	8000dce <TIM_OC4_SetConfig+0x3e>
 8000dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dbe:	42a8      	cmp	r0, r5
 8000dc0:	d005      	beq.n	8000dce <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dc2:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000dc4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000dc6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000dc8:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000dca:	6204      	str	r4, [r0, #32]
}
 8000dcc:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000dce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000dd4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000dd8:	e7f3      	b.n	8000dc2 <TIM_OC4_SetConfig+0x32>
 8000dda:	bf00      	nop
 8000ddc:	40010000 	.word	0x40010000

08000de0 <HAL_TIM_OC_MspInit>:
 8000de0:	4770      	bx	lr

08000de2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000de2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000de6:	2b01      	cmp	r3, #1
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000dee:	d01c      	beq.n	8000e2a <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000df0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000df4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000dfc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dfe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000e02:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000e06:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000e08:	680a      	ldr	r2, [r1, #0]
 8000e0a:	2a40      	cmp	r2, #64	; 0x40
 8000e0c:	d079      	beq.n	8000f02 <HAL_TIM_ConfigClockSource+0x120>
 8000e0e:	d819      	bhi.n	8000e44 <HAL_TIM_ConfigClockSource+0x62>
 8000e10:	2a10      	cmp	r2, #16
 8000e12:	f000 8093 	beq.w	8000f3c <HAL_TIM_ConfigClockSource+0x15a>
 8000e16:	d80a      	bhi.n	8000e2e <HAL_TIM_ConfigClockSource+0x4c>
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f000 8089 	beq.w	8000f30 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000e24:	2300      	movs	r3, #0
 8000e26:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000e2a:	4618      	mov	r0, r3
}
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e2e:	2a20      	cmp	r2, #32
 8000e30:	f000 808a 	beq.w	8000f48 <HAL_TIM_ConfigClockSource+0x166>
 8000e34:	2a30      	cmp	r2, #48	; 0x30
 8000e36:	d1f2      	bne.n	8000e1e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000e38:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000e3e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000e42:	e036      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e44:	2a70      	cmp	r2, #112	; 0x70
 8000e46:	d036      	beq.n	8000eb6 <HAL_TIM_ConfigClockSource+0xd4>
 8000e48:	d81b      	bhi.n	8000e82 <HAL_TIM_ConfigClockSource+0xa0>
 8000e4a:	2a50      	cmp	r2, #80	; 0x50
 8000e4c:	d042      	beq.n	8000ed4 <HAL_TIM_ConfigClockSource+0xf2>
 8000e4e:	2a60      	cmp	r2, #96	; 0x60
 8000e50:	d1e5      	bne.n	8000e1e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e52:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000e54:	684d      	ldr	r5, [r1, #4]
 8000e56:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e58:	f024 0410 	bic.w	r4, r4, #16
 8000e5c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e5e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000e60:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e62:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e6a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e6e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000e72:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e74:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000e76:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000e7c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000e80:	e017      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e82:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000e86:	d011      	beq.n	8000eac <HAL_TIM_ConfigClockSource+0xca>
 8000e88:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e8c:	d1c7      	bne.n	8000e1e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000e8e:	688a      	ldr	r2, [r1, #8]
 8000e90:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e92:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000e94:	68c9      	ldr	r1, [r1, #12]
 8000e96:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e98:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000e9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ea0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000ea2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000eaa:	e002      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	e7b3      	b.n	8000e1e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000eb6:	688a      	ldr	r2, [r1, #8]
 8000eb8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000eba:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000ebc:	68c9      	ldr	r1, [r1, #12]
 8000ebe:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ec0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000ec4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ec8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000eca:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000ecc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ece:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000ed2:	e7ee      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000ed4:	684c      	ldr	r4, [r1, #4]
 8000ed6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ed8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eda:	6a1d      	ldr	r5, [r3, #32]
 8000edc:	f025 0501 	bic.w	r5, r5, #1
 8000ee0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000ee2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ee4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ee8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000eec:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000ef0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ef4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ef6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ef8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000efc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000f00:	e7d7      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f02:	684c      	ldr	r4, [r1, #4]
 8000f04:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f06:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f08:	6a1d      	ldr	r5, [r3, #32]
 8000f0a:	f025 0501 	bic.w	r5, r5, #1
 8000f0e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f10:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f12:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f1a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000f1e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f22:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f24:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f2a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000f2e:	e7c0      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f30:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f36:	f042 0207 	orr.w	r2, r2, #7
 8000f3a:	e7ba      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f3c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f42:	f042 0217 	orr.w	r2, r2, #23
 8000f46:	e7b4      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f48:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f4e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000f52:	e7ae      	b.n	8000eb2 <HAL_TIM_ConfigClockSource+0xd0>

08000f54 <HAL_TIM_PeriodElapsedCallback>:
 8000f54:	4770      	bx	lr

08000f56 <HAL_TIM_OC_DelayElapsedCallback>:
 8000f56:	4770      	bx	lr

08000f58 <HAL_TIM_IC_CaptureCallback>:
 8000f58:	4770      	bx	lr

08000f5a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000f5a:	4770      	bx	lr

08000f5c <HAL_TIM_TriggerCallback>:
 8000f5c:	4770      	bx	lr

08000f5e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f5e:	6803      	ldr	r3, [r0, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	0791      	lsls	r1, r2, #30
{
 8000f64:	b510      	push	{r4, lr}
 8000f66:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f68:	d50e      	bpl.n	8000f88 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	0792      	lsls	r2, r2, #30
 8000f6e:	d50b      	bpl.n	8000f88 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f70:	f06f 0202 	mvn.w	r2, #2
 8000f74:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f76:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f78:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f7a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f7c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f7e:	d077      	beq.n	8001070 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f80:	f7ff ffea 	bl	8000f58 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f84:	2300      	movs	r3, #0
 8000f86:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	0750      	lsls	r0, r2, #29
 8000f8e:	d510      	bpl.n	8000fb2 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	0751      	lsls	r1, r2, #29
 8000f94:	d50d      	bpl.n	8000fb2 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f96:	f06f 0204 	mvn.w	r2, #4
 8000f9a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f9c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f9e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fa0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fa4:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000fa6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fa8:	d068      	beq.n	800107c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000faa:	f7ff ffd5 	bl	8000f58 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	0712      	lsls	r2, r2, #28
 8000fb8:	d50f      	bpl.n	8000fda <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	0710      	lsls	r0, r2, #28
 8000fbe:	d50c      	bpl.n	8000fda <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000fc0:	f06f 0208 	mvn.w	r2, #8
 8000fc4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fc6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fc8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fca:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fcc:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000fce:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fd0:	d05a      	beq.n	8001088 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fd2:	f7ff ffc1 	bl	8000f58 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	06d2      	lsls	r2, r2, #27
 8000fe0:	d510      	bpl.n	8001004 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	06d0      	lsls	r0, r2, #27
 8000fe6:	d50d      	bpl.n	8001004 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000fe8:	f06f 0210 	mvn.w	r2, #16
 8000fec:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ff0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ff2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ff6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000ff8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ffa:	d04b      	beq.n	8001094 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ffc:	f7ff ffac 	bl	8000f58 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001000:	2300      	movs	r3, #0
 8001002:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	07d1      	lsls	r1, r2, #31
 800100a:	d508      	bpl.n	800101e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	07d2      	lsls	r2, r2, #31
 8001010:	d505      	bpl.n	800101e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001012:	f06f 0201 	mvn.w	r2, #1
 8001016:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff ff9b 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	0610      	lsls	r0, r2, #24
 8001024:	d508      	bpl.n	8001038 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	0611      	lsls	r1, r2, #24
 800102a:	d505      	bpl.n	8001038 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800102c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001030:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001032:	4620      	mov	r0, r4
 8001034:	f000 f977 	bl	8001326 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	0652      	lsls	r2, r2, #25
 800103e:	d508      	bpl.n	8001052 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	0650      	lsls	r0, r2, #25
 8001044:	d505      	bpl.n	8001052 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800104a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800104c:	4620      	mov	r0, r4
 800104e:	f7ff ff85 	bl	8000f5c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	0691      	lsls	r1, r2, #26
 8001058:	d522      	bpl.n	80010a0 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	0692      	lsls	r2, r2, #26
 800105e:	d51f      	bpl.n	80010a0 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001060:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001064:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001066:	611a      	str	r2, [r3, #16]
}
 8001068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800106c:	f000 b95a 	b.w	8001324 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001070:	f7ff ff71 	bl	8000f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff ff70 	bl	8000f5a <HAL_TIM_PWM_PulseFinishedCallback>
 800107a:	e783      	b.n	8000f84 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800107c:	f7ff ff6b 	bl	8000f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001080:	4620      	mov	r0, r4
 8001082:	f7ff ff6a 	bl	8000f5a <HAL_TIM_PWM_PulseFinishedCallback>
 8001086:	e792      	b.n	8000fae <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001088:	f7ff ff65 	bl	8000f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800108c:	4620      	mov	r0, r4
 800108e:	f7ff ff64 	bl	8000f5a <HAL_TIM_PWM_PulseFinishedCallback>
 8001092:	e7a0      	b.n	8000fd6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001094:	f7ff ff5f 	bl	8000f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff ff5e 	bl	8000f5a <HAL_TIM_PWM_PulseFinishedCallback>
 800109e:	e7af      	b.n	8001000 <HAL_TIM_IRQHandler+0xa2>
 80010a0:	bd10      	pop	{r4, pc}
	...

080010a4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80010a4:	4a2e      	ldr	r2, [pc, #184]	; (8001160 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80010a6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80010a8:	4290      	cmp	r0, r2
 80010aa:	d012      	beq.n	80010d2 <TIM_Base_SetConfig+0x2e>
 80010ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010b0:	d00f      	beq.n	80010d2 <TIM_Base_SetConfig+0x2e>
 80010b2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80010b6:	4290      	cmp	r0, r2
 80010b8:	d00b      	beq.n	80010d2 <TIM_Base_SetConfig+0x2e>
 80010ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010be:	4290      	cmp	r0, r2
 80010c0:	d007      	beq.n	80010d2 <TIM_Base_SetConfig+0x2e>
 80010c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010c6:	4290      	cmp	r0, r2
 80010c8:	d003      	beq.n	80010d2 <TIM_Base_SetConfig+0x2e>
 80010ca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80010ce:	4290      	cmp	r0, r2
 80010d0:	d11d      	bne.n	800110e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80010d2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80010d8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80010da:	4a21      	ldr	r2, [pc, #132]	; (8001160 <TIM_Base_SetConfig+0xbc>)
 80010dc:	4290      	cmp	r0, r2
 80010de:	d104      	bne.n	80010ea <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010e0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80010e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010e6:	4313      	orrs	r3, r2
 80010e8:	e028      	b.n	800113c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80010ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010ee:	d0f7      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <TIM_Base_SetConfig+0xc0>)
 80010f2:	4290      	cmp	r0, r2
 80010f4:	d0f4      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 80010f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010fa:	4290      	cmp	r0, r2
 80010fc:	d0f0      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 80010fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001102:	4290      	cmp	r0, r2
 8001104:	d0ec      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 8001106:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800110a:	4290      	cmp	r0, r2
 800110c:	d0e8      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <TIM_Base_SetConfig+0xc4>)
 8001110:	4290      	cmp	r0, r2
 8001112:	d0e5      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 8001114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001118:	4290      	cmp	r0, r2
 800111a:	d0e1      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 800111c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001120:	4290      	cmp	r0, r2
 8001122:	d0dd      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 8001124:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001128:	4290      	cmp	r0, r2
 800112a:	d0d9      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 800112c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001130:	4290      	cmp	r0, r2
 8001132:	d0d5      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
 8001134:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001138:	4290      	cmp	r0, r2
 800113a:	d0d1      	beq.n	80010e0 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800113c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800113e:	688b      	ldr	r3, [r1, #8]
 8001140:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001142:	680b      	ldr	r3, [r1, #0]
 8001144:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <TIM_Base_SetConfig+0xbc>)
 8001148:	4298      	cmp	r0, r3
 800114a:	d006      	beq.n	800115a <TIM_Base_SetConfig+0xb6>
 800114c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001150:	4298      	cmp	r0, r3
 8001152:	d002      	beq.n	800115a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001154:	2301      	movs	r3, #1
 8001156:	6143      	str	r3, [r0, #20]
}
 8001158:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800115a:	690b      	ldr	r3, [r1, #16]
 800115c:	6303      	str	r3, [r0, #48]	; 0x30
 800115e:	e7f9      	b.n	8001154 <TIM_Base_SetConfig+0xb0>
 8001160:	40010000 	.word	0x40010000
 8001164:	40000400 	.word	0x40000400
 8001168:	40014000 	.word	0x40014000

0800116c <HAL_TIM_Base_Init>:
{ 
 800116c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800116e:	4604      	mov	r4, r0
 8001170:	b1a0      	cbz	r0, 800119c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001172:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001176:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800117a:	b91b      	cbnz	r3, 8001184 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800117c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001180:	f000 fb6c 	bl	800185c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001184:	2302      	movs	r3, #2
 8001186:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800118a:	6820      	ldr	r0, [r4, #0]
 800118c:	1d21      	adds	r1, r4, #4
 800118e:	f7ff ff89 	bl	80010a4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001192:	2301      	movs	r3, #1
 8001194:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001198:	2000      	movs	r0, #0
 800119a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800119c:	2001      	movs	r0, #1
}
 800119e:	bd10      	pop	{r4, pc}

080011a0 <HAL_TIM_OC_Init>:
{
 80011a0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80011a2:	4604      	mov	r4, r0
 80011a4:	b1a0      	cbz	r0, 80011d0 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80011a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011ae:	b91b      	cbnz	r3, 80011b8 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80011b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 80011b4:	f7ff fe14 	bl	8000de0 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80011be:	6820      	ldr	r0, [r4, #0]
 80011c0:	1d21      	adds	r1, r4, #4
 80011c2:	f7ff ff6f 	bl	80010a4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80011cc:	2000      	movs	r0, #0
 80011ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
}
 80011d2:	bd10      	pop	{r4, pc}

080011d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011d4:	6a03      	ldr	r3, [r0, #32]
 80011d6:	f023 0310 	bic.w	r3, r3, #16
 80011da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80011dc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80011de:	6842      	ldr	r2, [r0, #4]
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80011e2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80011e6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011ea:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80011ee:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80011f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80011f4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80011f8:	4c0d      	ldr	r4, [pc, #52]	; (8001230 <TIM_OC2_SetConfig+0x5c>)
 80011fa:	42a0      	cmp	r0, r4
 80011fc:	d009      	beq.n	8001212 <TIM_OC2_SetConfig+0x3e>
 80011fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001202:	42a0      	cmp	r0, r4
 8001204:	d005      	beq.n	8001212 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001206:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001208:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800120a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800120c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800120e:	6203      	str	r3, [r0, #32]
}
 8001210:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001212:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001214:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800121a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800121e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001220:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001224:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800122a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800122e:	e7ea      	b.n	8001206 <TIM_OC2_SetConfig+0x32>
 8001230:	40010000 	.word	0x40010000

08001234 <HAL_TIM_OC_ConfigChannel>:
{
 8001234:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 8001236:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800123a:	2b01      	cmp	r3, #1
{
 800123c:	4604      	mov	r4, r0
 800123e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8001242:	d018      	beq.n	8001276 <HAL_TIM_OC_ConfigChannel+0x42>
 8001244:	2301      	movs	r3, #1
 8001246:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800124a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800124e:	461d      	mov	r5, r3
  switch (Channel)
 8001250:	2a0c      	cmp	r2, #12
 8001252:	d80b      	bhi.n	800126c <HAL_TIM_OC_ConfigChannel+0x38>
 8001254:	e8df f002 	tbb	[pc, r2]
 8001258:	0a0a0a07 	.word	0x0a0a0a07
 800125c:	0a0a0a10 	.word	0x0a0a0a10
 8001260:	0a0a0a14 	.word	0x0a0a0a14
 8001264:	18          	.byte	0x18
 8001265:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001266:	6820      	ldr	r0, [r4, #0]
 8001268:	f7ff fd36 	bl	8000cd8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 800126c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800126e:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 8001272:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001276:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001278:	6820      	ldr	r0, [r4, #0]
 800127a:	f7ff ffab 	bl	80011d4 <TIM_OC2_SetConfig>
    break;
 800127e:	e7f5      	b.n	800126c <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001280:	6820      	ldr	r0, [r4, #0]
 8001282:	f7ff fd55 	bl	8000d30 <TIM_OC3_SetConfig>
    break;
 8001286:	e7f1      	b.n	800126c <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001288:	6820      	ldr	r0, [r4, #0]
 800128a:	f7ff fd81 	bl	8000d90 <TIM_OC4_SetConfig>
    break;
 800128e:	e7ed      	b.n	800126c <HAL_TIM_OC_ConfigChannel+0x38>

08001290 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001290:	6a03      	ldr	r3, [r0, #32]
{
 8001292:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001294:	2401      	movs	r4, #1
 8001296:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001298:	ea23 0304 	bic.w	r3, r3, r4
 800129c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800129e:	6a03      	ldr	r3, [r0, #32]
 80012a0:	408a      	lsls	r2, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	6202      	str	r2, [r0, #32]
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <HAL_TIM_PWM_Start>:
{
 80012a8:	b510      	push	{r4, lr}
 80012aa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80012ac:	2201      	movs	r2, #1
 80012ae:	6800      	ldr	r0, [r0, #0]
 80012b0:	f7ff ffee 	bl	8001290 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_TIM_PWM_Start+0x30>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_TIM_PWM_Start+0x1c>
 80012bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d103      	bne.n	80012cc <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80012c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
} 
 80012d4:	2000      	movs	r0, #0
 80012d6:	bd10      	pop	{r4, pc}
 80012d8:	40010000 	.word	0x40010000

080012dc <HAL_TIM_OC_Start>:
 80012dc:	f7ff bfe4 	b.w	80012a8 <HAL_TIM_PWM_Start>

080012e0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80012e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012e4:	2b01      	cmp	r3, #1
{
 80012e6:	b510      	push	{r4, lr}
 80012e8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80012ec:	d018      	beq.n	8001320 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80012ee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012f2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80012f4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012f6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012f8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012fe:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4322      	orrs	r2, r4
 8001304:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800130c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	430a      	orrs	r2, r1
 8001312:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001314:	2301      	movs	r3, #1
 8001316:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800131a:	2300      	movs	r3, #0
 800131c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001320:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001322:	bd10      	pop	{r4, pc}

08001324 <HAL_TIMEx_CommutationCallback>:
 8001324:	4770      	bx	lr

08001326 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001326:	4770      	bx	lr

08001328 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800132c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800132e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001330:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001332:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001338:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800133a:	6133      	str	r3, [r6, #16]
{
 800133c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800133e:	6883      	ldr	r3, [r0, #8]
 8001340:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001342:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001344:	4303      	orrs	r3, r0
 8001346:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001348:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800134c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800134e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001352:	430b      	orrs	r3, r1
 8001354:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001356:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001358:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800135a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800135c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001360:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001362:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001366:	6173      	str	r3, [r6, #20]
 8001368:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800136a:	d17c      	bne.n	8001466 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800136c:	429e      	cmp	r6, r3
 800136e:	d003      	beq.n	8001378 <UART_SetConfig+0x50>
 8001370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001374:	429e      	cmp	r6, r3
 8001376:	d144      	bne.n	8001402 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001378:	f7ff fc9e 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 800137c:	2519      	movs	r5, #25
 800137e:	fb05 f300 	mul.w	r3, r5, r0
 8001382:	6860      	ldr	r0, [r4, #4]
 8001384:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001388:	0040      	lsls	r0, r0, #1
 800138a:	fbb3 f3f0 	udiv	r3, r3, r0
 800138e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001392:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001396:	f7ff fc8f 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	4368      	muls	r0, r5
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fbb0 f7f3 	udiv	r7, r0, r3
 80013a4:	f7ff fc88 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 80013a8:	6863      	ldr	r3, [r4, #4]
 80013aa:	4368      	muls	r0, r5
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b2:	fbb3 f3f9 	udiv	r3, r3, r9
 80013b6:	fb09 7313 	mls	r3, r9, r3, r7
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	3332      	adds	r3, #50	; 0x32
 80013be:	fbb3 f3f9 	udiv	r3, r3, r9
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80013c8:	f7ff fc76 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 80013cc:	6862      	ldr	r2, [r4, #4]
 80013ce:	4368      	muls	r0, r5
 80013d0:	0052      	lsls	r2, r2, #1
 80013d2:	fbb0 faf2 	udiv	sl, r0, r2
 80013d6:	f7ff fc6f 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013da:	6863      	ldr	r3, [r4, #4]
 80013dc:	4368      	muls	r0, r5
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80013e8:	fb09 a313 	mls	r3, r9, r3, sl
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	3332      	adds	r3, #50	; 0x32
 80013f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013fa:	443b      	add	r3, r7
 80013fc:	60b3      	str	r3, [r6, #8]
 80013fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001402:	f7ff fc49 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001406:	2519      	movs	r5, #25
 8001408:	fb05 f300 	mul.w	r3, r5, r0
 800140c:	6860      	ldr	r0, [r4, #4]
 800140e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	fbb3 f3f0 	udiv	r3, r3, r0
 8001418:	fbb3 f3f9 	udiv	r3, r3, r9
 800141c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001420:	f7ff fc3a 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001424:	6863      	ldr	r3, [r4, #4]
 8001426:	4368      	muls	r0, r5
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fbb0 f7f3 	udiv	r7, r0, r3
 800142e:	f7ff fc33 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	4368      	muls	r0, r5
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fbb0 f3f3 	udiv	r3, r0, r3
 800143c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001440:	fb09 7313 	mls	r3, r9, r3, r7
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	3332      	adds	r3, #50	; 0x32
 8001448:	fbb3 f3f9 	udiv	r3, r3, r9
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001452:	f7ff fc21 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001456:	6862      	ldr	r2, [r4, #4]
 8001458:	4368      	muls	r0, r5
 800145a:	0052      	lsls	r2, r2, #1
 800145c:	fbb0 faf2 	udiv	sl, r0, r2
 8001460:	f7ff fc1a 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001464:	e7b9      	b.n	80013da <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001466:	429e      	cmp	r6, r3
 8001468:	d002      	beq.n	8001470 <UART_SetConfig+0x148>
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <UART_SetConfig+0x230>)
 800146c:	429e      	cmp	r6, r3
 800146e:	d140      	bne.n	80014f2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001470:	f7ff fc22 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 8001474:	6867      	ldr	r7, [r4, #4]
 8001476:	2519      	movs	r5, #25
 8001478:	f04f 0964 	mov.w	r9, #100	; 0x64
 800147c:	fb05 f300 	mul.w	r3, r5, r0
 8001480:	00bf      	lsls	r7, r7, #2
 8001482:	fbb3 f3f7 	udiv	r3, r3, r7
 8001486:	fbb3 f3f9 	udiv	r3, r3, r9
 800148a:	011f      	lsls	r7, r3, #4
 800148c:	f7ff fc14 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	4368      	muls	r0, r5
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fbb0 f8f3 	udiv	r8, r0, r3
 800149a:	f7ff fc0d 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 800149e:	6863      	ldr	r3, [r4, #4]
 80014a0:	4368      	muls	r0, r5
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014ac:	fb09 8313 	mls	r3, r9, r3, r8
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	3332      	adds	r3, #50	; 0x32
 80014b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014b8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80014bc:	f7ff fbfc 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
 80014c0:	6862      	ldr	r2, [r4, #4]
 80014c2:	4368      	muls	r0, r5
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	fbb0 faf2 	udiv	sl, r0, r2
 80014ca:	f7ff fbf5 	bl	8000cb8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	4368      	muls	r0, r5
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014dc:	fb09 a313 	mls	r3, r9, r3, sl
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	3332      	adds	r3, #50	; 0x32
 80014e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	ea43 0308 	orr.w	r3, r3, r8
 80014f0:	e783      	b.n	80013fa <UART_SetConfig+0xd2>
 80014f2:	f7ff fbd1 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 80014f6:	6867      	ldr	r7, [r4, #4]
 80014f8:	2519      	movs	r5, #25
 80014fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014fe:	fb05 f300 	mul.w	r3, r5, r0
 8001502:	00bf      	lsls	r7, r7, #2
 8001504:	fbb3 f3f7 	udiv	r3, r3, r7
 8001508:	fbb3 f3f9 	udiv	r3, r3, r9
 800150c:	011f      	lsls	r7, r3, #4
 800150e:	f7ff fbc3 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001512:	6863      	ldr	r3, [r4, #4]
 8001514:	4368      	muls	r0, r5
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fbb0 f8f3 	udiv	r8, r0, r3
 800151c:	f7ff fbbc 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001520:	6863      	ldr	r3, [r4, #4]
 8001522:	4368      	muls	r0, r5
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	fbb0 f3f3 	udiv	r3, r0, r3
 800152a:	fbb3 f3f9 	udiv	r3, r3, r9
 800152e:	fb09 8313 	mls	r3, r9, r3, r8
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	3332      	adds	r3, #50	; 0x32
 8001536:	fbb3 f3f9 	udiv	r3, r3, r9
 800153a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800153e:	f7ff fbab 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001542:	6862      	ldr	r2, [r4, #4]
 8001544:	4368      	muls	r0, r5
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	fbb0 faf2 	udiv	sl, r0, r2
 800154c:	f7ff fba4 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
 8001550:	e7bd      	b.n	80014ce <UART_SetConfig+0x1a6>
 8001552:	bf00      	nop
 8001554:	40011000 	.word	0x40011000
 8001558:	40011400 	.word	0x40011400

0800155c <HAL_UART_Init>:
{
 800155c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800155e:	4604      	mov	r4, r0
 8001560:	b340      	cbz	r0, 80015b4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001562:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001566:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800156a:	b91b      	cbnz	r3, 8001574 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800156c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001570:	f000 f9a6 	bl	80018c0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001574:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001576:	2324      	movs	r3, #36	; 0x24
 8001578:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800157c:	68d3      	ldr	r3, [r2, #12]
 800157e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001582:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fecf 	bl	8001328 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001592:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800159a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015a2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80015a6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80015aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80015ae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015b4:	2001      	movs	r0, #1
}
 80015b6:	bd10      	pop	{r4, pc}

080015b8 <strToVar>:
volatile uint8_t v_flag_u8;

uint16_t strToVar(uint8_t str[])
{
   int8_t v_cnt_u8 ;
   v_freq_u16 = 0;
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <strToVar+0x30>)
 80015ba:	2300      	movs	r3, #0
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	1e41      	subs	r1, r0, #1
   v_freq_u16 = 0;
 80015c0:	8013      	strh	r3, [r2, #0]
 80015c2:	3009      	adds	r0, #9
   for(v_cnt_u8 = 0; v_cnt_u8 < 10; v_cnt_u8++)
   {
	   if(str[v_cnt_u8] == '\r')
 80015c4:	784b      	ldrb	r3, [r1, #1]
 80015c6:	2b0d      	cmp	r3, #13
 80015c8:	d00c      	beq.n	80015e4 <strToVar+0x2c>
	   {
		   break;
	   }
	   v_freq_u16  *= 10;
 80015ca:	8813      	ldrh	r3, [r2, #0]
 80015cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	8013      	strh	r3, [r2, #0]
	   v_freq_u16  += (str[v_cnt_u8] - 48);
 80015d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80015da:	3b30      	subs	r3, #48	; 0x30
 80015dc:	4423      	add	r3, r4
   for(v_cnt_u8 = 0; v_cnt_u8 < 10; v_cnt_u8++)
 80015de:	4281      	cmp	r1, r0
	   v_freq_u16  += (str[v_cnt_u8] - 48);
 80015e0:	8013      	strh	r3, [r2, #0]
   for(v_cnt_u8 = 0; v_cnt_u8 < 10; v_cnt_u8++)
 80015e2:	d1ef      	bne.n	80015c4 <strToVar+0xc>
   }
   return v_freq_u16;
 80015e4:	8810      	ldrh	r0, [r2, #0]
}
 80015e6:	bd10      	pop	{r4, pc}
 80015e8:	20000020 	.word	0x20000020

080015ec <setARRValue>:

void setARRValue(uint16_t v_reqFreq_u16)
{
    v_arrValue_u16 = (M_PCLKVALUE)/(2 * M_PRESCALAR * v_reqFreq_u16);
 80015ec:	23c8      	movs	r3, #200	; 0xc8
 80015ee:	4343      	muls	r3, r0
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <setARRValue+0x14>)
 80015f2:	fb90 f0f3 	sdiv	r0, r0, r3
    v_arrValue_u16 -= 1;
 80015f6:	4b03      	ldr	r3, [pc, #12]	; (8001604 <setARRValue+0x18>)
 80015f8:	3801      	subs	r0, #1
 80015fa:	8018      	strh	r0, [r3, #0]
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	00f42400 	.word	0x00f42400
 8001604:	20000028 	.word	0x20000028

08001608 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001608:	b510      	push	{r4, lr}
 800160a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	4a21      	ldr	r2, [pc, #132]	; (8001694 <SystemClock_Config+0x8c>)
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001614:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001618:	6411      	str	r1, [r2, #64]	; 0x40
 800161a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800161c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <SystemClock_Config+0x90>)
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	6811      	ldr	r1, [r2, #0]
 800162a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800162e:	6011      	str	r1, [r2, #0]
 8001630:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001632:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001638:	9202      	str	r2, [sp, #8]
 800163a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163c:	2202      	movs	r2, #2
 800163e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	2201      	movs	r2, #1
 8001642:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001646:	2210      	movs	r2, #16
 8001648:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f7ff f8e1 	bl	8000810 <HAL_RCC_OscConfig>
 800164e:	4601      	mov	r1, r0
 8001650:	b100      	cbz	r0, 8001654 <SystemClock_Config+0x4c>
 8001652:	e7fe      	b.n	8001652 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001656:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165a:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800165e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001662:	f7ff fa79 	bl	8000b58 <HAL_RCC_ClockConfig>
 8001666:	4604      	mov	r4, r0
 8001668:	b100      	cbz	r0, 800166c <SystemClock_Config+0x64>
 800166a:	e7fe      	b.n	800166a <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800166c:	f7ff fb0e 	bl	8000c8c <HAL_RCC_GetHCLKFreq>
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	fbb0 f0f3 	udiv	r0, r0, r3
 8001678:	f7fe ffbc 	bl	80005f4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800167c:	2004      	movs	r0, #4
 800167e:	f7fe ffcf 	bl	8000620 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001682:	4622      	mov	r2, r4
 8001684:	4621      	mov	r1, r4
 8001686:	f04f 30ff 	mov.w	r0, #4294967295
 800168a:	f7fe ff73 	bl	8000574 <HAL_NVIC_SetPriority>
}
 800168e:	b014      	add	sp, #80	; 0x50
 8001690:	bd10      	pop	{r4, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <main>:
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b090      	sub	sp, #64	; 0x40
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a0:	2400      	movs	r4, #0
  HAL_Init();
 80016a2:	f7fe ff2d 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 80016a6:	f7ff ffaf 	bl	8001608 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <main+0x140>)
 80016ac:	9400      	str	r4, [sp, #0]
 80016ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80016b0:	484b      	ldr	r0, [pc, #300]	; (80017e0 <main+0x144>)
  huart2.Instance = USART2;
 80016b2:	4d4c      	ldr	r5, [pc, #304]	; (80017e4 <main+0x148>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	9401      	str	r4, [sp, #4]
 80016c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	f002 0201 	and.w	r2, r2, #1
 80016d4:	9201      	str	r2, [sp, #4]
 80016d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d8:	9402      	str	r4, [sp, #8]
 80016da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016dc:	f042 0208 	orr.w	r2, r2, #8
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80016ea:	4622      	mov	r2, r4
 80016ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016f2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80016f6:	f7ff f885 	bl	8000804 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	a909      	add	r1, sp, #36	; 0x24
 80016fe:	4838      	ldr	r0, [pc, #224]	; (80017e0 <main+0x144>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001702:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001708:	f7fe ff9c 	bl	8000644 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 800170c:	4936      	ldr	r1, [pc, #216]	; (80017e8 <main+0x14c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 8001710:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001714:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001718:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800171c:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800171e:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001720:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001726:	f7ff ff19 	bl	800155c <HAL_UART_Init>
 800172a:	b100      	cbz	r0, 800172e <main+0x92>
 800172c:	e7fe      	b.n	800172c <main+0x90>
  htim2.Instance = TIM2;
 800172e:	4c2f      	ldr	r4, [pc, #188]	; (80017ec <main+0x150>)
  htim2.Init.Prescaler = 99;
 8001730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001734:	2363      	movs	r3, #99	; 0x63
 8001736:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 799;
 800173c:	f240 331f 	movw	r3, #799	; 0x31f
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001742:	4620      	mov	r0, r4
  htim2.Init.Period = 799;
 8001744:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001746:	f7ff fd11 	bl	800116c <HAL_TIM_Base_Init>
 800174a:	4626      	mov	r6, r4
 800174c:	b100      	cbz	r0, 8001750 <main+0xb4>
 800174e:	e7fe      	b.n	800174e <main+0xb2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001750:	a910      	add	r1, sp, #64	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001752:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f841 7d2c 	str.w	r7, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001758:	f7ff fb43 	bl	8000de2 <HAL_TIM_ConfigClockSource>
 800175c:	b100      	cbz	r0, 8001760 <main+0xc4>
 800175e:	e7fe      	b.n	800175e <main+0xc2>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff fd1d 	bl	80011a0 <HAL_TIM_OC_Init>
 8001766:	b100      	cbz	r0, 800176a <main+0xce>
 8001768:	e7fe      	b.n	8001768 <main+0xcc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176e:	a903      	add	r1, sp, #12
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff fdb5 	bl	80012e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4602      	mov	r2, r0
 8001778:	b100      	cbz	r0, 800177c <main+0xe0>
 800177a:	e7fe      	b.n	800177a <main+0xde>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800177c:	2330      	movs	r3, #48	; 0x30
  sConfigOC.Pulse = 0;
 800177e:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001780:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001782:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001784:	a909      	add	r1, sp, #36	; 0x24
 8001786:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001788:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178a:	f7ff fd53 	bl	8001234 <HAL_TIM_OC_ConfigChannel>
 800178e:	4604      	mov	r4, r0
 8001790:	b100      	cbz	r0, 8001794 <main+0xf8>
 8001792:	e7fe      	b.n	8001792 <main+0xf6>
  HAL_TIM_MspPostInit(&htim2);
 8001794:	4630      	mov	r0, r6
 8001796:	f000 f87d 	bl	8001894 <HAL_TIM_MspPostInit>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 800179a:	4621      	mov	r1, r4
 800179c:	4630      	mov	r0, r6
 800179e:	f7ff fd9d 	bl	80012dc <HAL_TIM_OC_Start>
  SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
 80017a2:	682b      	ldr	r3, [r5, #0]
		  	  	  setARRValue(strToVar(a_freq_u8));
 80017a4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80017f8 <main+0x15c>
  SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
 80017a8:	695a      	ldr	r2, [r3, #20]
	  if(10 == v_flag_u8)
 80017aa:	4d11      	ldr	r5, [pc, #68]	; (80017f0 <main+0x154>)
		 		   __HAL_TIM_SET_AUTORELOAD(&htim2,v_arrValue_u16);
 80017ac:	4f11      	ldr	r7, [pc, #68]	; (80017f4 <main+0x158>)
  SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	615a      	str	r2, [r3, #20]
  SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE);
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	f042 0220 	orr.w	r2, r2, #32
 80017ba:	60da      	str	r2, [r3, #12]
	  if(10 == v_flag_u8)
 80017bc:	782b      	ldrb	r3, [r5, #0]
 80017be:	2b0a      	cmp	r3, #10
 80017c0:	d1fc      	bne.n	80017bc <main+0x120>
		  v_flag_u8 = 0 ;
 80017c2:	2400      	movs	r4, #0
		  	  	  setARRValue(strToVar(a_freq_u8));
 80017c4:	4640      	mov	r0, r8
		  v_flag_u8 = 0 ;
 80017c6:	702c      	strb	r4, [r5, #0]
		  	  	  setARRValue(strToVar(a_freq_u8));
 80017c8:	f7ff fef6 	bl	80015b8 <strToVar>
 80017cc:	f7ff ff0e 	bl	80015ec <setARRValue>
		 		   __HAL_TIM_SET_AUTORELOAD(&htim2,v_arrValue_u16);
 80017d0:	6833      	ldr	r3, [r6, #0]
 80017d2:	883a      	ldrh	r2, [r7, #0]
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017d6:	60f2      	str	r2, [r6, #12]
		 		   __HAL_TIM_SetCounter(&htim2,0);
 80017d8:	625c      	str	r4, [r3, #36]	; 0x24
 80017da:	e7ef      	b.n	80017bc <main+0x120>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	20000074 	.word	0x20000074
 80017e8:	40004400 	.word	0x40004400
 80017ec:	20000038 	.word	0x20000038
 80017f0:	20000034 	.word	0x20000034
 80017f4:	20000028 	.word	0x20000028
 80017f8:	200000b4 	.word	0x200000b4

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fe:	2003      	movs	r0, #3
 8001800:	f7fe fea6 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	4611      	mov	r1, r2
 8001808:	f06f 000b 	mvn.w	r0, #11
 800180c:	f7fe feb2 	bl	8000574 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	4611      	mov	r1, r2
 8001814:	f06f 000a 	mvn.w	r0, #10
 8001818:	f7fe feac 	bl	8000574 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	4611      	mov	r1, r2
 8001820:	f06f 0009 	mvn.w	r0, #9
 8001824:	f7fe fea6 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	4611      	mov	r1, r2
 800182c:	f06f 0004 	mvn.w	r0, #4
 8001830:	f7fe fea0 	bl	8000574 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	4611      	mov	r1, r2
 8001838:	f06f 0003 	mvn.w	r0, #3
 800183c:	f7fe fe9a 	bl	8000574 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	4611      	mov	r1, r2
 8001844:	f06f 0001 	mvn.w	r0, #1
 8001848:	f7fe fe94 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	4611      	mov	r1, r2
 8001850:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001858:	f7fe be8c 	b.w	8000574 <HAL_NVIC_SetPriority>

0800185c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 800185c:	6803      	ldr	r3, [r0, #0]
 800185e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001862:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001864:	d113      	bne.n	800188e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	2200      	movs	r2, #0
 8001868:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800186c:	9201      	str	r2, [sp, #4]
 800186e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001870:	f041 0101 	orr.w	r1, r1, #1
 8001874:	6419      	str	r1, [r3, #64]	; 0x40
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187e:	201c      	movs	r0, #28
 8001880:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001884:	f7fe fe76 	bl	8000574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001888:	201c      	movs	r0, #28
 800188a:	f7fe fea7 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800188e:	b003      	add	sp, #12
 8001890:	f85d fb04 	ldr.w	pc, [sp], #4

08001894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d10b      	bne.n	80018b6 <HAL_TIM_MspPostInit+0x22>
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a0:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <HAL_TIM_MspPostInit+0x28>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f7fe fec7 	bl	8000644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018b6:	b007      	add	sp, #28
 80018b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80018c2:	6802      	ldr	r2, [r0, #0]
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_UART_MspInit+0x58>)
 80018c6:	429a      	cmp	r2, r3
{
 80018c8:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 80018ca:	d122      	bne.n	8001912 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018cc:	2400      	movs	r4, #0
 80018ce:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80018d2:	9400      	str	r4, [sp, #0]
 80018d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	4811      	ldr	r0, [pc, #68]	; (800191c <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80018dc:	6419      	str	r1, [r3, #64]	; 0x40
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e8:	230c      	movs	r3, #12
 80018ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f7fe fea1 	bl	8000644 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001902:	2026      	movs	r0, #38	; 0x26
 8001904:	4622      	mov	r2, r4
 8001906:	4621      	mov	r1, r4
 8001908:	f7fe fe34 	bl	8000574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800190c:	2026      	movs	r0, #38	; 0x26
 800190e:	f7fe fe65 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001912:	b006      	add	sp, #24
 8001914:	bd10      	pop	{r4, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40020000 	.word	0x40020000

08001920 <NMI_Handler>:
 8001920:	4770      	bx	lr

08001922 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler>

08001924 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler>

08001926 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler>

08001928 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler>

0800192a <SVC_Handler>:
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001932:	f7fe fdff 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800193a:	f7fe be7e 	b.w	800063a <HAL_SYSTICK_IRQHandler>
	...

08001940 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001940:	4801      	ldr	r0, [pc, #4]	; (8001948 <TIM2_IRQHandler+0x8>)
 8001942:	f7ff bb0c 	b.w	8000f5e <HAL_TIM_IRQHandler>
 8001946:	bf00      	nop
 8001948:	20000038 	.word	0x20000038

0800194c <USART2_IRQHandler>:
uint8_t a_freq_u8[10] ;
volatile extern uint8_t v_flag_u8;


void USART2_IRQHandler(void)
{
 800194c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	a_freq_u8[v_indCnt_u8] = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <USART2_IRQHandler+0x38>)
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <USART2_IRQHandler+0x3c>)
 8001952:	6808      	ldr	r0, [r1, #0]
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <USART2_IRQHandler+0x40>)
 8001958:	6844      	ldr	r4, [r0, #4]
 800195a:	548c      	strb	r4, [r1, r2]
	v_indCnt_u8++;
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	3201      	adds	r2, #1
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]
	if(a_freq_u8[v_indCnt_u8 - 1]  ==  '\r')
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	4411      	add	r1, r2
 8001968:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 800196c:	2a0d      	cmp	r2, #13
 800196e:	d104      	bne.n	800197a <USART2_IRQHandler+0x2e>
	{
		v_indCnt_u8 = 0;
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
		v_flag_u8 = 10;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <USART2_IRQHandler+0x44>)
 8001976:	220a      	movs	r2, #10
 8001978:	701a      	strb	r2, [r3, #0]
	}


	SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE);
 800197a:	68c3      	ldr	r3, [r0, #12]
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	60c3      	str	r3, [r0, #12]
 8001982:	bd10      	pop	{r4, pc}
 8001984:	20000074 	.word	0x20000074
 8001988:	20000022 	.word	0x20000022
 800198c:	200000b4 	.word	0x200000b4
 8001990:	20000034 	.word	0x20000034

08001994 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	490f      	ldr	r1, [pc, #60]	; (80019d4 <SystemInit+0x40>)
 8001996:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800199a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <SystemInit+0x44>)
 80019a4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019a6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80019a8:	f042 0201 	orr.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80019ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80019b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <SystemInit+0x48>)
 80019be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019c8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019ce:	608b      	str	r3, [r1, #8]
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	24003010 	.word	0x24003010

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019e6:	e003      	b.n	80019f0 <LoopCopyDataInit>

080019e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ee:	3104      	adds	r1, #4

080019f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019f8:	d3f6      	bcc.n	80019e8 <CopyDataInit>
  ldr  r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019fc:	e002      	b.n	8001a04 <LoopFillZerobss>

080019fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a00:	f842 3b04 	str.w	r3, [r2], #4

08001a04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a08:	d3f9      	bcc.n	80019fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0a:	f7ff ffc3 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f000 f811 	bl	8001a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff fe43 	bl	800169c <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a1c:	08001abc 	.word	0x08001abc
  ldr  r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a24:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001a28:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001a2c:	200000c0 	.word	0x200000c0

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>
	...

08001a34 <__libc_init_array>:
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	4e0d      	ldr	r6, [pc, #52]	; (8001a6c <__libc_init_array+0x38>)
 8001a38:	4c0d      	ldr	r4, [pc, #52]	; (8001a70 <__libc_init_array+0x3c>)
 8001a3a:	1ba4      	subs	r4, r4, r6
 8001a3c:	10a4      	asrs	r4, r4, #2
 8001a3e:	2500      	movs	r5, #0
 8001a40:	42a5      	cmp	r5, r4
 8001a42:	d109      	bne.n	8001a58 <__libc_init_array+0x24>
 8001a44:	4e0b      	ldr	r6, [pc, #44]	; (8001a74 <__libc_init_array+0x40>)
 8001a46:	4c0c      	ldr	r4, [pc, #48]	; (8001a78 <__libc_init_array+0x44>)
 8001a48:	f000 f818 	bl	8001a7c <_init>
 8001a4c:	1ba4      	subs	r4, r4, r6
 8001a4e:	10a4      	asrs	r4, r4, #2
 8001a50:	2500      	movs	r5, #0
 8001a52:	42a5      	cmp	r5, r4
 8001a54:	d105      	bne.n	8001a62 <__libc_init_array+0x2e>
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a5c:	4798      	blx	r3
 8001a5e:	3501      	adds	r5, #1
 8001a60:	e7ee      	b.n	8001a40 <__libc_init_array+0xc>
 8001a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a66:	4798      	blx	r3
 8001a68:	3501      	adds	r5, #1
 8001a6a:	e7f2      	b.n	8001a52 <__libc_init_array+0x1e>
 8001a6c:	08001ab4 	.word	0x08001ab4
 8001a70:	08001ab4 	.word	0x08001ab4
 8001a74:	08001ab4 	.word	0x08001ab4
 8001a78:	08001ab8 	.word	0x08001ab8

08001a7c <_init>:
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	bf00      	nop
 8001a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a82:	bc08      	pop	{r3}
 8001a84:	469e      	mov	lr, r3
 8001a86:	4770      	bx	lr

08001a88 <_fini>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	bf00      	nop
 8001a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8e:	bc08      	pop	{r3}
 8001a90:	469e      	mov	lr, r3
 8001a92:	4770      	bx	lr
